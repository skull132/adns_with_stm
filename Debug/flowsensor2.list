
flowsensor2.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000014e4  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000040  0800166c  0800166c  0001166c  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .init_array   00000004  080016ac  080016ac  000116ac  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .fini_array   00000004  080016b0  080016b0  000116b0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         00000c0c  20000000  080016b4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .ccmram       00000000  10000000  10000000  00020c0c  2**0
                  CONTENTS
  7 .bss          00000088  20000c0c  20000c0c  00020c0c  2**2
                  ALLOC
  8 ._user_heap_stack 00000600  20000c94  20000c94  00020c0c  2**0
                  ALLOC
  9 .ARM.attributes 00000030  00000000  00000000  00020c0c  2**0
                  CONTENTS, READONLY
 10 .debug_info   0000ced0  00000000  00000000  00020c3c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_abbrev 00001cb2  00000000  00000000  0002db0c  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    00002be6  00000000  00000000  0002f7be  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_aranges 00000548  00000000  00000000  000323a8  2**3
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_ranges 000007e0  00000000  00000000  000328f0  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_line   00003c5e  00000000  00000000  000330d0  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_str    000020e8  00000000  00000000  00036d2e  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .comment      0000007c  00000000  00000000  00038e16  2**0
                  CONTENTS, READONLY
 18 .debug_frame  00000d84  00000000  00000000  00038e94  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	20000c0c 	.word	0x20000c0c
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08001654 	.word	0x08001654

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000c10 	.word	0x20000c10
 80001c4:	08001654 	.word	0x08001654

080001c8 <HAL_InitTick>:
  *         implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80001c8:	b538      	push	{r3, r4, r5, lr}
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80001ca:	4a0e      	ldr	r2, [pc, #56]	; (8000204 <HAL_InitTick+0x3c>)
 80001cc:	4b0e      	ldr	r3, [pc, #56]	; (8000208 <HAL_InitTick+0x40>)
{
 80001ce:	4605      	mov	r5, r0
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80001d0:	7818      	ldrb	r0, [r3, #0]
 80001d2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80001d6:	fbb3 f3f0 	udiv	r3, r3, r0
 80001da:	6810      	ldr	r0, [r2, #0]
 80001dc:	fbb0 f0f3 	udiv	r0, r0, r3
 80001e0:	f000 f894 	bl	800030c <HAL_SYSTICK_Config>
 80001e4:	4604      	mov	r4, r0
 80001e6:	b958      	cbnz	r0, 8000200 <HAL_InitTick+0x38>
  {
    return HAL_ERROR;
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80001e8:	2d0f      	cmp	r5, #15
 80001ea:	d809      	bhi.n	8000200 <HAL_InitTick+0x38>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80001ec:	4602      	mov	r2, r0
 80001ee:	4629      	mov	r1, r5
 80001f0:	f04f 30ff 	mov.w	r0, #4294967295
 80001f4:	f000 f856 	bl	80002a4 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80001f8:	4b04      	ldr	r3, [pc, #16]	; (800020c <HAL_InitTick+0x44>)
 80001fa:	4620      	mov	r0, r4
 80001fc:	601d      	str	r5, [r3, #0]
 80001fe:	bd38      	pop	{r3, r4, r5, pc}
    return HAL_ERROR;
 8000200:	2001      	movs	r0, #1
  {
    return HAL_ERROR;
  }
   /* Return function status */
  return HAL_OK;
}
 8000202:	bd38      	pop	{r3, r4, r5, pc}
 8000204:	20000c08 	.word	0x20000c08
 8000208:	20000000 	.word	0x20000000
 800020c:	20000004 	.word	0x20000004

08000210 <HAL_Init>:
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000210:	4a07      	ldr	r2, [pc, #28]	; (8000230 <HAL_Init+0x20>)
{
 8000212:	b508      	push	{r3, lr}
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000214:	6813      	ldr	r3, [r2, #0]
 8000216:	f043 0310 	orr.w	r3, r3, #16
 800021a:	6013      	str	r3, [r2, #0]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800021c:	2003      	movs	r0, #3
 800021e:	f000 f82f 	bl	8000280 <HAL_NVIC_SetPriorityGrouping>
  HAL_InitTick(TICK_INT_PRIORITY);
 8000222:	2000      	movs	r0, #0
 8000224:	f7ff ffd0 	bl	80001c8 <HAL_InitTick>
  HAL_MspInit();
 8000228:	f001 f944 	bl	80014b4 <HAL_MspInit>
}
 800022c:	2000      	movs	r0, #0
 800022e:	bd08      	pop	{r3, pc}
 8000230:	40022000 	.word	0x40022000

08000234 <HAL_IncTick>:
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += uwTickFreq;
 8000234:	4a03      	ldr	r2, [pc, #12]	; (8000244 <HAL_IncTick+0x10>)
 8000236:	4b04      	ldr	r3, [pc, #16]	; (8000248 <HAL_IncTick+0x14>)
 8000238:	6811      	ldr	r1, [r2, #0]
 800023a:	781b      	ldrb	r3, [r3, #0]
 800023c:	440b      	add	r3, r1
 800023e:	6013      	str	r3, [r2, #0]
 8000240:	4770      	bx	lr
 8000242:	bf00      	nop
 8000244:	20000c2c 	.word	0x20000c2c
 8000248:	20000000 	.word	0x20000000

0800024c <HAL_GetTick>:
  *         implementations  in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;  
 800024c:	4b01      	ldr	r3, [pc, #4]	; (8000254 <HAL_GetTick+0x8>)
 800024e:	6818      	ldr	r0, [r3, #0]
}
 8000250:	4770      	bx	lr
 8000252:	bf00      	nop
 8000254:	20000c2c 	.word	0x20000c2c

08000258 <HAL_Delay>:
  *         implementations  in user file.
  * @param  Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000258:	b538      	push	{r3, r4, r5, lr}
 800025a:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 800025c:	f7ff fff6 	bl	800024c <HAL_GetTick>
  uint32_t wait = Delay;
  
  /* Add freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000260:	1c63      	adds	r3, r4, #1
  {
    wait += (uint32_t)(uwTickFreq);
 8000262:	bf1c      	itt	ne
 8000264:	4b05      	ldrne	r3, [pc, #20]	; (800027c <HAL_Delay+0x24>)
 8000266:	781b      	ldrbne	r3, [r3, #0]
  uint32_t tickstart = HAL_GetTick();
 8000268:	4605      	mov	r5, r0
    wait += (uint32_t)(uwTickFreq);
 800026a:	bf18      	it	ne
 800026c:	18e4      	addne	r4, r4, r3
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 800026e:	f7ff ffed 	bl	800024c <HAL_GetTick>
 8000272:	1b40      	subs	r0, r0, r5
 8000274:	4284      	cmp	r4, r0
 8000276:	d8fa      	bhi.n	800026e <HAL_Delay+0x16>
  {
  }
}
 8000278:	bd38      	pop	{r3, r4, r5, pc}
 800027a:	bf00      	nop
 800027c:	20000000 	.word	0x20000000

08000280 <HAL_NVIC_SetPriorityGrouping>:
__STATIC_INLINE void NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000280:	4a07      	ldr	r2, [pc, #28]	; (80002a0 <HAL_NVIC_SetPriorityGrouping+0x20>)
 8000282:	68d3      	ldr	r3, [r2, #12]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000284:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8000288:	041b      	lsls	r3, r3, #16
 800028a:	0c1b      	lsrs	r3, r3, #16
 800028c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << 8U)                      );              /* Insert write key and priorty group */
 8000290:	0200      	lsls	r0, r0, #8
 8000292:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000296:	f400 60e0 	and.w	r0, r0, #1792	; 0x700
  reg_value  =  (reg_value                                   |
 800029a:	4303      	orrs	r3, r0
  SCB->AIRCR =  reg_value;
 800029c:	60d3      	str	r3, [r2, #12]
 800029e:	4770      	bx	lr
 80002a0:	e000ed00 	.word	0xe000ed00

080002a4 <HAL_NVIC_SetPriority>:
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t NVIC_GetPriorityGrouping(void)
{
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80002a4:	4b17      	ldr	r3, [pc, #92]	; (8000304 <HAL_NVIC_SetPriority+0x60>)
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80002a6:	b530      	push	{r4, r5, lr}
 80002a8:	68dc      	ldr	r4, [r3, #12]
 80002aa:	f3c4 2402 	ubfx	r4, r4, #8, #3
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80002ae:	f1c4 0307 	rsb	r3, r4, #7
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80002b2:	1d25      	adds	r5, r4, #4
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80002b4:	2b04      	cmp	r3, #4
 80002b6:	bf28      	it	cs
 80002b8:	2304      	movcs	r3, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80002ba:	2d06      	cmp	r5, #6

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80002bc:	f04f 0501 	mov.w	r5, #1
 80002c0:	fa05 f303 	lsl.w	r3, r5, r3
 80002c4:	f103 33ff 	add.w	r3, r3, #4294967295
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80002c8:	bf8c      	ite	hi
 80002ca:	3c03      	subhi	r4, #3
 80002cc:	2400      	movls	r4, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80002ce:	4019      	ands	r1, r3
 80002d0:	40a1      	lsls	r1, r4
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80002d2:	fa05 f404 	lsl.w	r4, r5, r4
 80002d6:	3c01      	subs	r4, #1
 80002d8:	4022      	ands	r2, r4
  if ((int32_t)(IRQn) < 0)
 80002da:	2800      	cmp	r0, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80002dc:	ea42 0201 	orr.w	r2, r2, r1
 80002e0:	ea4f 1202 	mov.w	r2, r2, lsl #4
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80002e4:	bfaf      	iteee	ge
 80002e6:	f100 4060 	addge.w	r0, r0, #3758096384	; 0xe0000000
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80002ea:	f000 000f 	andlt.w	r0, r0, #15
 80002ee:	4b06      	ldrlt	r3, [pc, #24]	; (8000308 <HAL_NVIC_SetPriority+0x64>)
 80002f0:	b2d2      	uxtblt	r2, r2
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80002f2:	bfa5      	ittet	ge
 80002f4:	f500 4061 	addge.w	r0, r0, #57600	; 0xe100
 80002f8:	b2d2      	uxtbge	r2, r2
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80002fa:	541a      	strblt	r2, [r3, r0]
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80002fc:	f880 2300 	strbge.w	r2, [r0, #768]	; 0x300
 8000300:	bd30      	pop	{r4, r5, pc}
 8000302:	bf00      	nop
 8000304:	e000ed00 	.word	0xe000ed00
 8000308:	e000ed14 	.word	0xe000ed14

0800030c <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800030c:	3801      	subs	r0, #1
 800030e:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8000312:	d20a      	bcs.n	800032a <HAL_SYSTICK_Config+0x1e>
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000314:	4b06      	ldr	r3, [pc, #24]	; (8000330 <HAL_SYSTICK_Config+0x24>)
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000316:	4a07      	ldr	r2, [pc, #28]	; (8000334 <HAL_SYSTICK_Config+0x28>)
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000318:	6058      	str	r0, [r3, #4]
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800031a:	21f0      	movs	r1, #240	; 0xf0
 800031c:	f882 1023 	strb.w	r1, [r2, #35]	; 0x23
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000320:	2000      	movs	r0, #0
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000322:	2207      	movs	r2, #7
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000324:	6098      	str	r0, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000326:	601a      	str	r2, [r3, #0]
 8000328:	4770      	bx	lr
    return (1UL);                                                   /* Reload value impossible */
 800032a:	2001      	movs	r0, #1
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
   return SysTick_Config(TicksNumb);
}
 800032c:	4770      	bx	lr
 800032e:	bf00      	nop
 8000330:	e000e010 	.word	0xe000e010
 8000334:	e000ed00 	.word	0xe000ed00

08000338 <HAL_SYSTICK_CLKSourceConfig>:
  *             @arg SYSTICK_CLKSOURCE_HCLK_DIV8: AHB clock divided by 8 selected as SysTick clock source.
  *             @arg SYSTICK_CLKSOURCE_HCLK: AHB clock selected as SysTick clock source.
  * @retval None
  */
void HAL_SYSTICK_CLKSourceConfig(uint32_t CLKSource)
{
 8000338:	4b04      	ldr	r3, [pc, #16]	; (800034c <HAL_SYSTICK_CLKSourceConfig+0x14>)
  /* Check the parameters */
  assert_param(IS_SYSTICK_CLK_SOURCE(CLKSource));
  if (CLKSource == SYSTICK_CLKSOURCE_HCLK)
  {
    SysTick->CTRL |= SYSTICK_CLKSOURCE_HCLK;
 800033a:	681a      	ldr	r2, [r3, #0]
  if (CLKSource == SYSTICK_CLKSOURCE_HCLK)
 800033c:	2804      	cmp	r0, #4
    SysTick->CTRL |= SYSTICK_CLKSOURCE_HCLK;
 800033e:	bf0c      	ite	eq
 8000340:	f042 0204 	orreq.w	r2, r2, #4
  }
  else
  {
    SysTick->CTRL &= ~SYSTICK_CLKSOURCE_HCLK;
 8000344:	f022 0204 	bicne.w	r2, r2, #4
 8000348:	601a      	str	r2, [r3, #0]
 800034a:	4770      	bx	lr
 800034c:	e000e010 	.word	0xe000e010

08000350 <HAL_SYSTICK_Callback>:
/**
  * @brief  SYSTICK callback.
  * @retval None
  */
__weak void HAL_SYSTICK_Callback(void)
{
 8000350:	4770      	bx	lr

08000352 <HAL_SYSTICK_IRQHandler>:
{
 8000352:	b508      	push	{r3, lr}
  HAL_SYSTICK_Callback();
 8000354:	f7ff fffc 	bl	8000350 <HAL_SYSTICK_Callback>
 8000358:	bd08      	pop	{r3, pc}
	...

0800035c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800035c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8000360:	b085      	sub	sp, #20
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != RESET)
 8000362:	680b      	ldr	r3, [r1, #0]
      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000364:	f8df 8164 	ldr.w	r8, [pc, #356]	; 80004cc <HAL_GPIO_Init+0x170>
        temp &= ~((0x0FU) << (4U * (position & 0x03U)));
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
        SYSCFG->EXTICR[position >> 2] = temp;

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8000368:	4a56      	ldr	r2, [pc, #344]	; (80004c4 <HAL_GPIO_Init+0x168>)
  while (((GPIO_Init->Pin) >> position) != RESET)
 800036a:	9301      	str	r3, [sp, #4]
        temp &= ~((0x0FU) << (4U * (position & 0x03U)));
 800036c:	f04f 090f 	mov.w	r9, #15
  uint32_t position = 0x00U;
 8000370:	2300      	movs	r3, #0
  while (((GPIO_Init->Pin) >> position) != RESET)
 8000372:	9c01      	ldr	r4, [sp, #4]
 8000374:	40dc      	lsrs	r4, r3
 8000376:	d102      	bne.n	800037e <HAL_GPIO_Init+0x22>
      }
    }
    
    position++;
  }
}
 8000378:	b005      	add	sp, #20
 800037a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    iocurrent = (GPIO_Init->Pin) & (1U << position);
 800037e:	2401      	movs	r4, #1
 8000380:	fa04 fa03 	lsl.w	sl, r4, r3
    if(iocurrent)
 8000384:	9c01      	ldr	r4, [sp, #4]
 8000386:	ea14 050a 	ands.w	r5, r4, sl
 800038a:	f000 8093 	beq.w	80004b4 <HAL_GPIO_Init+0x158>
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800038e:	684c      	ldr	r4, [r1, #4]
 8000390:	f024 0b10 	bic.w	fp, r4, #16
 8000394:	f1bb 0f02 	cmp.w	fp, #2
 8000398:	d111      	bne.n	80003be <HAL_GPIO_Init+0x62>
        temp = GPIOx->AFR[position >> 3];
 800039a:	08df      	lsrs	r7, r3, #3
 800039c:	eb00 0787 	add.w	r7, r0, r7, lsl #2
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80003a0:	f003 0e07 	and.w	lr, r3, #7
        temp = GPIOx->AFR[position >> 3];
 80003a4:	6a3e      	ldr	r6, [r7, #32]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80003a6:	ea4f 0e8e 	mov.w	lr, lr, lsl #2
 80003aa:	fa09 fc0e 	lsl.w	ip, r9, lr
 80003ae:	ea26 0c0c 	bic.w	ip, r6, ip
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80003b2:	690e      	ldr	r6, [r1, #16]
 80003b4:	fa06 f60e 	lsl.w	r6, r6, lr
 80003b8:	ea46 060c 	orr.w	r6, r6, ip
        GPIOx->AFR[position >> 3] = temp;
 80003bc:	623e      	str	r6, [r7, #32]
 80003be:	ea4f 0c43 	mov.w	ip, r3, lsl #1
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80003c2:	2703      	movs	r7, #3
      temp = GPIOx->MODER;
 80003c4:	6806      	ldr	r6, [r0, #0]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80003c6:	fa07 f70c 	lsl.w	r7, r7, ip
 80003ca:	43ff      	mvns	r7, r7
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80003cc:	f004 0e03 	and.w	lr, r4, #3
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80003d0:	403e      	ands	r6, r7
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80003d2:	fa0e fe0c 	lsl.w	lr, lr, ip
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80003d6:	f10b 3bff 	add.w	fp, fp, #4294967295
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80003da:	ea4e 0606 	orr.w	r6, lr, r6
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80003de:	f1bb 0f01 	cmp.w	fp, #1
      GPIOx->MODER = temp;
 80003e2:	6006      	str	r6, [r0, #0]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80003e4:	d811      	bhi.n	800040a <HAL_GPIO_Init+0xae>
        temp = GPIOx->OSPEEDR;
 80003e6:	6886      	ldr	r6, [r0, #8]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80003e8:	ea06 0b07 	and.w	fp, r6, r7
        temp |= (GPIO_Init->Speed << (position * 2U));
 80003ec:	68ce      	ldr	r6, [r1, #12]
 80003ee:	fa06 fe0c 	lsl.w	lr, r6, ip
 80003f2:	ea4e 060b 	orr.w	r6, lr, fp
        GPIOx->OSPEEDR = temp;
 80003f6:	6086      	str	r6, [r0, #8]
        temp = GPIOx->OTYPER;
 80003f8:	6846      	ldr	r6, [r0, #4]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80003fa:	ea26 0a0a 	bic.w	sl, r6, sl
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 80003fe:	f3c4 1600 	ubfx	r6, r4, #4, #1
 8000402:	409e      	lsls	r6, r3
 8000404:	ea46 060a 	orr.w	r6, r6, sl
        GPIOx->OTYPER = temp;
 8000408:	6046      	str	r6, [r0, #4]
      temp = GPIOx->PUPDR;
 800040a:	68c6      	ldr	r6, [r0, #12]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800040c:	4037      	ands	r7, r6
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 800040e:	688e      	ldr	r6, [r1, #8]
 8000410:	fa06 f60c 	lsl.w	r6, r6, ip
 8000414:	4337      	orrs	r7, r6
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000416:	00e6      	lsls	r6, r4, #3
      GPIOx->PUPDR = temp;
 8000418:	60c7      	str	r7, [r0, #12]
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800041a:	d54b      	bpl.n	80004b4 <HAL_GPIO_Init+0x158>
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800041c:	f8d8 6018 	ldr.w	r6, [r8, #24]
 8000420:	f046 0601 	orr.w	r6, r6, #1
 8000424:	f8c8 6018 	str.w	r6, [r8, #24]
 8000428:	f8d8 6018 	ldr.w	r6, [r8, #24]
 800042c:	f023 0703 	bic.w	r7, r3, #3
 8000430:	f107 4780 	add.w	r7, r7, #1073741824	; 0x40000000
 8000434:	f006 0601 	and.w	r6, r6, #1
 8000438:	f507 3780 	add.w	r7, r7, #65536	; 0x10000
 800043c:	9603      	str	r6, [sp, #12]
        temp &= ~((0x0FU) << (4U * (position & 0x03U)));
 800043e:	f003 0e03 	and.w	lr, r3, #3
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000442:	9e03      	ldr	r6, [sp, #12]
        temp = SYSCFG->EXTICR[position >> 2];
 8000444:	68be      	ldr	r6, [r7, #8]
        temp &= ~((0x0FU) << (4U * (position & 0x03U)));
 8000446:	ea4f 0e8e 	mov.w	lr, lr, lsl #2
 800044a:	fa09 fc0e 	lsl.w	ip, r9, lr
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 800044e:	f1b0 4f90 	cmp.w	r0, #1207959552	; 0x48000000
        temp &= ~((0x0FU) << (4U * (position & 0x03U)));
 8000452:	ea26 0c0c 	bic.w	ip, r6, ip
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8000456:	d02f      	beq.n	80004b8 <HAL_GPIO_Init+0x15c>
 8000458:	4e1b      	ldr	r6, [pc, #108]	; (80004c8 <HAL_GPIO_Init+0x16c>)
 800045a:	42b0      	cmp	r0, r6
 800045c:	d02e      	beq.n	80004bc <HAL_GPIO_Init+0x160>
 800045e:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 8000462:	42b0      	cmp	r0, r6
 8000464:	d02c      	beq.n	80004c0 <HAL_GPIO_Init+0x164>
 8000466:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 800046a:	42b0      	cmp	r0, r6
 800046c:	bf14      	ite	ne
 800046e:	2605      	movne	r6, #5
 8000470:	2603      	moveq	r6, #3
 8000472:	fa06 f60e 	lsl.w	r6, r6, lr
 8000476:	ea46 060c 	orr.w	r6, r6, ip
        SYSCFG->EXTICR[position >> 2] = temp;
 800047a:	60be      	str	r6, [r7, #8]
        temp = EXTI->IMR;
 800047c:	6816      	ldr	r6, [r2, #0]
        temp &= ~((uint32_t)iocurrent);
 800047e:	43ef      	mvns	r7, r5
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8000480:	f414 3f80 	tst.w	r4, #65536	; 0x10000
        temp &= ~((uint32_t)iocurrent);
 8000484:	bf0c      	ite	eq
 8000486:	403e      	andeq	r6, r7
          temp |= iocurrent;
 8000488:	432e      	orrne	r6, r5
        EXTI->IMR = temp;
 800048a:	6016      	str	r6, [r2, #0]
        temp = EXTI->EMR;
 800048c:	6856      	ldr	r6, [r2, #4]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800048e:	f414 3f00 	tst.w	r4, #131072	; 0x20000
        temp &= ~((uint32_t)iocurrent);
 8000492:	bf0c      	ite	eq
 8000494:	403e      	andeq	r6, r7
          temp |= iocurrent;
 8000496:	432e      	orrne	r6, r5
        EXTI->EMR = temp;
 8000498:	6056      	str	r6, [r2, #4]
        temp = EXTI->RTSR;
 800049a:	6896      	ldr	r6, [r2, #8]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800049c:	f414 1f80 	tst.w	r4, #1048576	; 0x100000
        temp &= ~((uint32_t)iocurrent);
 80004a0:	bf0c      	ite	eq
 80004a2:	403e      	andeq	r6, r7
          temp |= iocurrent;
 80004a4:	432e      	orrne	r6, r5
        EXTI->RTSR = temp;
 80004a6:	6096      	str	r6, [r2, #8]
        temp = EXTI->FTSR;
 80004a8:	68d6      	ldr	r6, [r2, #12]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80004aa:	02a4      	lsls	r4, r4, #10
        temp &= ~((uint32_t)iocurrent);
 80004ac:	bf54      	ite	pl
 80004ae:	403e      	andpl	r6, r7
          temp |= iocurrent;
 80004b0:	432e      	orrmi	r6, r5
        EXTI->FTSR = temp;
 80004b2:	60d6      	str	r6, [r2, #12]
    position++;
 80004b4:	3301      	adds	r3, #1
 80004b6:	e75c      	b.n	8000372 <HAL_GPIO_Init+0x16>
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 80004b8:	2600      	movs	r6, #0
 80004ba:	e7da      	b.n	8000472 <HAL_GPIO_Init+0x116>
 80004bc:	2601      	movs	r6, #1
 80004be:	e7d8      	b.n	8000472 <HAL_GPIO_Init+0x116>
 80004c0:	2602      	movs	r6, #2
 80004c2:	e7d6      	b.n	8000472 <HAL_GPIO_Init+0x116>
 80004c4:	40010400 	.word	0x40010400
 80004c8:	48000400 	.word	0x48000400
 80004cc:	40021000 	.word	0x40021000

080004d0 <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80004d0:	b10a      	cbz	r2, 80004d6 <HAL_GPIO_WritePin+0x6>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80004d2:	6181      	str	r1, [r0, #24]
 80004d4:	4770      	bx	lr
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80004d6:	6281      	str	r1, [r0, #40]	; 0x28
 80004d8:	4770      	bx	lr
	...

080004dc <HAL_RCC_OscConfig>:
  /* Check the parameters */
  assert_param(RCC_OscInitStruct != NULL);
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80004dc:	6803      	ldr	r3, [r0, #0]
 80004de:	07da      	lsls	r2, r3, #31
{
 80004e0:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
 80004e4:	4605      	mov	r5, r0
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80004e6:	d411      	bmi.n	800050c <HAL_RCC_OscConfig+0x30>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80004e8:	682b      	ldr	r3, [r5, #0]
 80004ea:	079b      	lsls	r3, r3, #30
 80004ec:	f100 8088 	bmi.w	8000600 <HAL_RCC_OscConfig+0x124>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80004f0:	682b      	ldr	r3, [r5, #0]
 80004f2:	071c      	lsls	r4, r3, #28
 80004f4:	f100 80f8 	bmi.w	80006e8 <HAL_RCC_OscConfig+0x20c>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80004f8:	682b      	ldr	r3, [r5, #0]
 80004fa:	0758      	lsls	r0, r3, #29
 80004fc:	f100 8141 	bmi.w	8000782 <HAL_RCC_OscConfig+0x2a6>
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8000500:	69ea      	ldr	r2, [r5, #28]
 8000502:	2a00      	cmp	r2, #0
 8000504:	f040 81d7 	bne.w	80008b6 <HAL_RCC_OscConfig+0x3da>
    {
      return HAL_ERROR;
    }
  }
  
  return HAL_OK;
 8000508:	2000      	movs	r0, #0
 800050a:	e021      	b.n	8000550 <HAL_RCC_OscConfig+0x74>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 800050c:	4cba      	ldr	r4, [pc, #744]	; (80007f8 <HAL_RCC_OscConfig+0x31c>)
 800050e:	6863      	ldr	r3, [r4, #4]
 8000510:	f003 030c 	and.w	r3, r3, #12
 8000514:	2b04      	cmp	r3, #4
 8000516:	d007      	beq.n	8000528 <HAL_RCC_OscConfig+0x4c>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8000518:	6863      	ldr	r3, [r4, #4]
 800051a:	f003 030c 	and.w	r3, r3, #12
 800051e:	2b08      	cmp	r3, #8
 8000520:	d119      	bne.n	8000556 <HAL_RCC_OscConfig+0x7a>
 8000522:	6863      	ldr	r3, [r4, #4]
 8000524:	03df      	lsls	r7, r3, #15
 8000526:	d516      	bpl.n	8000556 <HAL_RCC_OscConfig+0x7a>
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03U) || (__CORTEX_SC >= 300U)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000528:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800052c:	fa93 f2a3 	rbit	r2, r3
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000530:	6821      	ldr	r1, [r4, #0]
 8000532:	fa93 f3a3 	rbit	r3, r3
 8000536:	fab3 f383 	clz	r3, r3
 800053a:	f003 031f 	and.w	r3, r3, #31
 800053e:	2201      	movs	r2, #1
 8000540:	fa02 f303 	lsl.w	r3, r2, r3
 8000544:	420b      	tst	r3, r1
 8000546:	d0cf      	beq.n	80004e8 <HAL_RCC_OscConfig+0xc>
 8000548:	686b      	ldr	r3, [r5, #4]
 800054a:	2b00      	cmp	r3, #0
 800054c:	d1cc      	bne.n	80004e8 <HAL_RCC_OscConfig+0xc>
        return HAL_ERROR;
 800054e:	2001      	movs	r0, #1
}
 8000550:	b002      	add	sp, #8
 8000552:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000556:	686a      	ldr	r2, [r5, #4]
 8000558:	f5b2 3f80 	cmp.w	r2, #65536	; 0x10000
 800055c:	d125      	bne.n	80005aa <HAL_RCC_OscConfig+0xce>
 800055e:	6823      	ldr	r3, [r4, #0]
 8000560:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000564:	6023      	str	r3, [r4, #0]
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8000566:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8000568:	68a9      	ldr	r1, [r5, #8]
 800056a:	f023 030f 	bic.w	r3, r3, #15
 800056e:	430b      	orrs	r3, r1
 8000570:	62e3      	str	r3, [r4, #44]	; 0x2c
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8000572:	b352      	cbz	r2, 80005ca <HAL_RCC_OscConfig+0xee>
        tickstart = HAL_GetTick();
 8000574:	f7ff fe6a 	bl	800024c <HAL_GetTick>
 8000578:	f44f 3600 	mov.w	r6, #131072	; 0x20000
 800057c:	4680      	mov	r8, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800057e:	2701      	movs	r7, #1
 8000580:	fa96 f3a6 	rbit	r3, r6
 8000584:	6822      	ldr	r2, [r4, #0]
 8000586:	fa96 f3a6 	rbit	r3, r6
 800058a:	fab3 f383 	clz	r3, r3
 800058e:	f003 031f 	and.w	r3, r3, #31
 8000592:	fa07 f303 	lsl.w	r3, r7, r3
 8000596:	4213      	tst	r3, r2
 8000598:	d1a6      	bne.n	80004e8 <HAL_RCC_OscConfig+0xc>
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800059a:	f7ff fe57 	bl	800024c <HAL_GetTick>
 800059e:	eba0 0008 	sub.w	r0, r0, r8
 80005a2:	2864      	cmp	r0, #100	; 0x64
 80005a4:	d9ec      	bls.n	8000580 <HAL_RCC_OscConfig+0xa4>
            return HAL_TIMEOUT;
 80005a6:	2003      	movs	r0, #3
 80005a8:	e7d2      	b.n	8000550 <HAL_RCC_OscConfig+0x74>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80005aa:	6823      	ldr	r3, [r4, #0]
 80005ac:	b932      	cbnz	r2, 80005bc <HAL_RCC_OscConfig+0xe0>
 80005ae:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80005b2:	6023      	str	r3, [r4, #0]
 80005b4:	6823      	ldr	r3, [r4, #0]
 80005b6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80005ba:	e7d3      	b.n	8000564 <HAL_RCC_OscConfig+0x88>
 80005bc:	f5b2 2fa0 	cmp.w	r2, #327680	; 0x50000
 80005c0:	d1f5      	bne.n	80005ae <HAL_RCC_OscConfig+0xd2>
 80005c2:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80005c6:	6023      	str	r3, [r4, #0]
 80005c8:	e7c9      	b.n	800055e <HAL_RCC_OscConfig+0x82>
        tickstart = HAL_GetTick();
 80005ca:	f7ff fe3f 	bl	800024c <HAL_GetTick>
 80005ce:	f44f 3600 	mov.w	r6, #131072	; 0x20000
 80005d2:	4680      	mov	r8, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80005d4:	2701      	movs	r7, #1
 80005d6:	fa96 f3a6 	rbit	r3, r6
 80005da:	6822      	ldr	r2, [r4, #0]
 80005dc:	fa96 f3a6 	rbit	r3, r6
 80005e0:	fab3 f383 	clz	r3, r3
 80005e4:	f003 031f 	and.w	r3, r3, #31
 80005e8:	fa07 f303 	lsl.w	r3, r7, r3
 80005ec:	4213      	tst	r3, r2
 80005ee:	f43f af7b 	beq.w	80004e8 <HAL_RCC_OscConfig+0xc>
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80005f2:	f7ff fe2b 	bl	800024c <HAL_GetTick>
 80005f6:	eba0 0008 	sub.w	r0, r0, r8
 80005fa:	2864      	cmp	r0, #100	; 0x64
 80005fc:	d9eb      	bls.n	80005d6 <HAL_RCC_OscConfig+0xfa>
 80005fe:	e7d2      	b.n	80005a6 <HAL_RCC_OscConfig+0xca>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8000600:	4c7d      	ldr	r4, [pc, #500]	; (80007f8 <HAL_RCC_OscConfig+0x31c>)
 8000602:	6863      	ldr	r3, [r4, #4]
 8000604:	f013 0f0c 	tst.w	r3, #12
 8000608:	d007      	beq.n	800061a <HAL_RCC_OscConfig+0x13e>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 800060a:	6863      	ldr	r3, [r4, #4]
 800060c:	f003 030c 	and.w	r3, r3, #12
 8000610:	2b08      	cmp	r3, #8
 8000612:	d121      	bne.n	8000658 <HAL_RCC_OscConfig+0x17c>
 8000614:	6863      	ldr	r3, [r4, #4]
 8000616:	03de      	lsls	r6, r3, #15
 8000618:	d41e      	bmi.n	8000658 <HAL_RCC_OscConfig+0x17c>
 800061a:	2302      	movs	r3, #2
 800061c:	fa93 f2a3 	rbit	r2, r3
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000620:	6821      	ldr	r1, [r4, #0]
 8000622:	fa93 f3a3 	rbit	r3, r3
 8000626:	fab3 f383 	clz	r3, r3
 800062a:	f003 031f 	and.w	r3, r3, #31
 800062e:	2201      	movs	r2, #1
 8000630:	fa02 f303 	lsl.w	r3, r2, r3
 8000634:	420b      	tst	r3, r1
 8000636:	d002      	beq.n	800063e <HAL_RCC_OscConfig+0x162>
 8000638:	692b      	ldr	r3, [r5, #16]
 800063a:	4293      	cmp	r3, r2
 800063c:	d187      	bne.n	800054e <HAL_RCC_OscConfig+0x72>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800063e:	6821      	ldr	r1, [r4, #0]
 8000640:	23f8      	movs	r3, #248	; 0xf8
 8000642:	fa93 f3a3 	rbit	r3, r3
 8000646:	fab3 f283 	clz	r2, r3
 800064a:	696b      	ldr	r3, [r5, #20]
 800064c:	4093      	lsls	r3, r2
 800064e:	f021 02f8 	bic.w	r2, r1, #248	; 0xf8
 8000652:	4313      	orrs	r3, r2
 8000654:	6023      	str	r3, [r4, #0]
 8000656:	e74b      	b.n	80004f0 <HAL_RCC_OscConfig+0x14>
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8000658:	692a      	ldr	r2, [r5, #16]
 800065a:	2601      	movs	r6, #1
 800065c:	b30a      	cbz	r2, 80006a2 <HAL_RCC_OscConfig+0x1c6>
 800065e:	fa96 f3a6 	rbit	r3, r6
        __HAL_RCC_HSI_ENABLE();
 8000662:	fab3 f383 	clz	r3, r3
 8000666:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 800066a:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 800066e:	009b      	lsls	r3, r3, #2
 8000670:	2702      	movs	r7, #2
 8000672:	601e      	str	r6, [r3, #0]
        tickstart = HAL_GetTick();
 8000674:	f7ff fdea 	bl	800024c <HAL_GetTick>
 8000678:	4680      	mov	r8, r0
 800067a:	fa97 f3a7 	rbit	r3, r7
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800067e:	6822      	ldr	r2, [r4, #0]
 8000680:	fa97 f3a7 	rbit	r3, r7
 8000684:	fab3 f383 	clz	r3, r3
 8000688:	f003 031f 	and.w	r3, r3, #31
 800068c:	fa06 f303 	lsl.w	r3, r6, r3
 8000690:	4213      	tst	r3, r2
 8000692:	d1d4      	bne.n	800063e <HAL_RCC_OscConfig+0x162>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8000694:	f7ff fdda 	bl	800024c <HAL_GetTick>
 8000698:	eba0 0008 	sub.w	r0, r0, r8
 800069c:	2802      	cmp	r0, #2
 800069e:	d9ec      	bls.n	800067a <HAL_RCC_OscConfig+0x19e>
 80006a0:	e781      	b.n	80005a6 <HAL_RCC_OscConfig+0xca>
 80006a2:	fa96 f3a6 	rbit	r3, r6
        __HAL_RCC_HSI_DISABLE();
 80006a6:	fab3 f383 	clz	r3, r3
 80006aa:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 80006ae:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 80006b2:	009b      	lsls	r3, r3, #2
 80006b4:	2702      	movs	r7, #2
 80006b6:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 80006b8:	f7ff fdc8 	bl	800024c <HAL_GetTick>
 80006bc:	4680      	mov	r8, r0
 80006be:	fa97 f3a7 	rbit	r3, r7
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80006c2:	6822      	ldr	r2, [r4, #0]
 80006c4:	fa97 f3a7 	rbit	r3, r7
 80006c8:	fab3 f383 	clz	r3, r3
 80006cc:	f003 031f 	and.w	r3, r3, #31
 80006d0:	fa06 f303 	lsl.w	r3, r6, r3
 80006d4:	4213      	tst	r3, r2
 80006d6:	f43f af0b 	beq.w	80004f0 <HAL_RCC_OscConfig+0x14>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80006da:	f7ff fdb7 	bl	800024c <HAL_GetTick>
 80006de:	eba0 0008 	sub.w	r0, r0, r8
 80006e2:	2802      	cmp	r0, #2
 80006e4:	d9eb      	bls.n	80006be <HAL_RCC_OscConfig+0x1e2>
 80006e6:	e75e      	b.n	80005a6 <HAL_RCC_OscConfig+0xca>
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80006e8:	69aa      	ldr	r2, [r5, #24]
 80006ea:	4e43      	ldr	r6, [pc, #268]	; (80007f8 <HAL_RCC_OscConfig+0x31c>)
 80006ec:	4943      	ldr	r1, [pc, #268]	; (80007fc <HAL_RCC_OscConfig+0x320>)
 80006ee:	2401      	movs	r4, #1
 80006f0:	b31a      	cbz	r2, 800073a <HAL_RCC_OscConfig+0x25e>
 80006f2:	fa94 f3a4 	rbit	r3, r4
      __HAL_RCC_LSI_ENABLE();
 80006f6:	fab3 f383 	clz	r3, r3
 80006fa:	440b      	add	r3, r1
 80006fc:	009b      	lsls	r3, r3, #2
 80006fe:	2702      	movs	r7, #2
 8000700:	601c      	str	r4, [r3, #0]
      tickstart = HAL_GetTick();
 8000702:	f7ff fda3 	bl	800024c <HAL_GetTick>
 8000706:	4680      	mov	r8, r0
 8000708:	fa97 f3a7 	rbit	r3, r7
 800070c:	fa97 f3a7 	rbit	r3, r7
 8000710:	fa97 f3a7 	rbit	r3, r7
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8000714:	6a72      	ldr	r2, [r6, #36]	; 0x24
 8000716:	fa97 f3a7 	rbit	r3, r7
 800071a:	fab3 f383 	clz	r3, r3
 800071e:	f003 031f 	and.w	r3, r3, #31
 8000722:	fa04 f303 	lsl.w	r3, r4, r3
 8000726:	4213      	tst	r3, r2
 8000728:	f47f aee6 	bne.w	80004f8 <HAL_RCC_OscConfig+0x1c>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800072c:	f7ff fd8e 	bl	800024c <HAL_GetTick>
 8000730:	eba0 0008 	sub.w	r0, r0, r8
 8000734:	2802      	cmp	r0, #2
 8000736:	d9e7      	bls.n	8000708 <HAL_RCC_OscConfig+0x22c>
 8000738:	e735      	b.n	80005a6 <HAL_RCC_OscConfig+0xca>
 800073a:	fa94 f3a4 	rbit	r3, r4
      __HAL_RCC_LSI_DISABLE();
 800073e:	fab3 f383 	clz	r3, r3
 8000742:	440b      	add	r3, r1
 8000744:	009b      	lsls	r3, r3, #2
 8000746:	2702      	movs	r7, #2
 8000748:	601a      	str	r2, [r3, #0]
      tickstart = HAL_GetTick();
 800074a:	f7ff fd7f 	bl	800024c <HAL_GetTick>
 800074e:	4680      	mov	r8, r0
 8000750:	fa97 f3a7 	rbit	r3, r7
 8000754:	fa97 f3a7 	rbit	r3, r7
 8000758:	fa97 f3a7 	rbit	r3, r7
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800075c:	6a72      	ldr	r2, [r6, #36]	; 0x24
 800075e:	fa97 f3a7 	rbit	r3, r7
 8000762:	fab3 f383 	clz	r3, r3
 8000766:	f003 031f 	and.w	r3, r3, #31
 800076a:	fa04 f303 	lsl.w	r3, r4, r3
 800076e:	4213      	tst	r3, r2
 8000770:	f43f aec2 	beq.w	80004f8 <HAL_RCC_OscConfig+0x1c>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8000774:	f7ff fd6a 	bl	800024c <HAL_GetTick>
 8000778:	eba0 0008 	sub.w	r0, r0, r8
 800077c:	2802      	cmp	r0, #2
 800077e:	d9e7      	bls.n	8000750 <HAL_RCC_OscConfig+0x274>
 8000780:	e711      	b.n	80005a6 <HAL_RCC_OscConfig+0xca>
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8000782:	4c1d      	ldr	r4, [pc, #116]	; (80007f8 <HAL_RCC_OscConfig+0x31c>)
 8000784:	69e3      	ldr	r3, [r4, #28]
 8000786:	00d9      	lsls	r1, r3, #3
 8000788:	d434      	bmi.n	80007f4 <HAL_RCC_OscConfig+0x318>
      __HAL_RCC_PWR_CLK_ENABLE();
 800078a:	69e3      	ldr	r3, [r4, #28]
 800078c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000790:	61e3      	str	r3, [r4, #28]
 8000792:	69e3      	ldr	r3, [r4, #28]
 8000794:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000798:	9301      	str	r3, [sp, #4]
 800079a:	9b01      	ldr	r3, [sp, #4]
      pwrclkchanged = SET;
 800079c:	2601      	movs	r6, #1
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800079e:	4f18      	ldr	r7, [pc, #96]	; (8000800 <HAL_RCC_OscConfig+0x324>)
 80007a0:	683b      	ldr	r3, [r7, #0]
 80007a2:	05da      	lsls	r2, r3, #23
 80007a4:	d52e      	bpl.n	8000804 <HAL_RCC_OscConfig+0x328>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80007a6:	68eb      	ldr	r3, [r5, #12]
 80007a8:	2b01      	cmp	r3, #1
 80007aa:	d13c      	bne.n	8000826 <HAL_RCC_OscConfig+0x34a>
 80007ac:	6a23      	ldr	r3, [r4, #32]
 80007ae:	f043 0301 	orr.w	r3, r3, #1
 80007b2:	6223      	str	r3, [r4, #32]
      tickstart = HAL_GetTick();
 80007b4:	f7ff fd4a 	bl	800024c <HAL_GetTick>
 80007b8:	2702      	movs	r7, #2
 80007ba:	4682      	mov	sl, r0
 80007bc:	46b9      	mov	r9, r7
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80007be:	f04f 0801 	mov.w	r8, #1
 80007c2:	fa97 f3a7 	rbit	r3, r7
 80007c6:	fa97 f3a7 	rbit	r3, r7
 80007ca:	2b00      	cmp	r3, #0
 80007cc:	d06b      	beq.n	80008a6 <HAL_RCC_OscConfig+0x3ca>
 80007ce:	6a22      	ldr	r2, [r4, #32]
 80007d0:	fa99 f3a9 	rbit	r3, r9
 80007d4:	fab3 f383 	clz	r3, r3
 80007d8:	f003 031f 	and.w	r3, r3, #31
 80007dc:	fa08 f303 	lsl.w	r3, r8, r3
 80007e0:	4213      	tst	r3, r2
 80007e2:	d057      	beq.n	8000894 <HAL_RCC_OscConfig+0x3b8>
    if(pwrclkchanged == SET)
 80007e4:	2e00      	cmp	r6, #0
 80007e6:	f43f ae8b 	beq.w	8000500 <HAL_RCC_OscConfig+0x24>
      __HAL_RCC_PWR_CLK_DISABLE();
 80007ea:	69e3      	ldr	r3, [r4, #28]
 80007ec:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80007f0:	61e3      	str	r3, [r4, #28]
 80007f2:	e685      	b.n	8000500 <HAL_RCC_OscConfig+0x24>
    FlagStatus       pwrclkchanged = RESET;
 80007f4:	2600      	movs	r6, #0
 80007f6:	e7d2      	b.n	800079e <HAL_RCC_OscConfig+0x2c2>
 80007f8:	40021000 	.word	0x40021000
 80007fc:	10908120 	.word	0x10908120
 8000800:	40007000 	.word	0x40007000
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8000804:	683b      	ldr	r3, [r7, #0]
 8000806:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800080a:	603b      	str	r3, [r7, #0]
      tickstart = HAL_GetTick();
 800080c:	f7ff fd1e 	bl	800024c <HAL_GetTick>
 8000810:	4680      	mov	r8, r0
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000812:	683b      	ldr	r3, [r7, #0]
 8000814:	05db      	lsls	r3, r3, #23
 8000816:	d4c6      	bmi.n	80007a6 <HAL_RCC_OscConfig+0x2ca>
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8000818:	f7ff fd18 	bl	800024c <HAL_GetTick>
 800081c:	eba0 0008 	sub.w	r0, r0, r8
 8000820:	2864      	cmp	r0, #100	; 0x64
 8000822:	d9f6      	bls.n	8000812 <HAL_RCC_OscConfig+0x336>
 8000824:	e6bf      	b.n	80005a6 <HAL_RCC_OscConfig+0xca>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8000826:	bb3b      	cbnz	r3, 8000878 <HAL_RCC_OscConfig+0x39c>
 8000828:	6a23      	ldr	r3, [r4, #32]
 800082a:	f023 0301 	bic.w	r3, r3, #1
 800082e:	6223      	str	r3, [r4, #32]
 8000830:	6a23      	ldr	r3, [r4, #32]
 8000832:	f023 0304 	bic.w	r3, r3, #4
 8000836:	6223      	str	r3, [r4, #32]
      tickstart = HAL_GetTick();
 8000838:	f7ff fd08 	bl	800024c <HAL_GetTick>
 800083c:	2702      	movs	r7, #2
 800083e:	4682      	mov	sl, r0
 8000840:	46b9      	mov	r9, r7
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8000842:	f04f 0801 	mov.w	r8, #1
 8000846:	fa97 f3a7 	rbit	r3, r7
 800084a:	fa97 f3a7 	rbit	r3, r7
 800084e:	b373      	cbz	r3, 80008ae <HAL_RCC_OscConfig+0x3d2>
 8000850:	6a22      	ldr	r2, [r4, #32]
 8000852:	fa99 f3a9 	rbit	r3, r9
 8000856:	fab3 f383 	clz	r3, r3
 800085a:	f003 031f 	and.w	r3, r3, #31
 800085e:	fa08 f303 	lsl.w	r3, r8, r3
 8000862:	4213      	tst	r3, r2
 8000864:	d0be      	beq.n	80007e4 <HAL_RCC_OscConfig+0x308>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8000866:	f7ff fcf1 	bl	800024c <HAL_GetTick>
 800086a:	f241 3388 	movw	r3, #5000	; 0x1388
 800086e:	eba0 000a 	sub.w	r0, r0, sl
 8000872:	4298      	cmp	r0, r3
 8000874:	d9e7      	bls.n	8000846 <HAL_RCC_OscConfig+0x36a>
 8000876:	e696      	b.n	80005a6 <HAL_RCC_OscConfig+0xca>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8000878:	2b05      	cmp	r3, #5
 800087a:	6a23      	ldr	r3, [r4, #32]
 800087c:	d103      	bne.n	8000886 <HAL_RCC_OscConfig+0x3aa>
 800087e:	f043 0304 	orr.w	r3, r3, #4
 8000882:	6223      	str	r3, [r4, #32]
 8000884:	e792      	b.n	80007ac <HAL_RCC_OscConfig+0x2d0>
 8000886:	f023 0301 	bic.w	r3, r3, #1
 800088a:	6223      	str	r3, [r4, #32]
 800088c:	6a23      	ldr	r3, [r4, #32]
 800088e:	f023 0304 	bic.w	r3, r3, #4
 8000892:	e78e      	b.n	80007b2 <HAL_RCC_OscConfig+0x2d6>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8000894:	f7ff fcda 	bl	800024c <HAL_GetTick>
 8000898:	f241 3388 	movw	r3, #5000	; 0x1388
 800089c:	eba0 000a 	sub.w	r0, r0, sl
 80008a0:	4298      	cmp	r0, r3
 80008a2:	d98e      	bls.n	80007c2 <HAL_RCC_OscConfig+0x2e6>
 80008a4:	e67f      	b.n	80005a6 <HAL_RCC_OscConfig+0xca>
 80008a6:	fa97 f3a7 	rbit	r3, r7
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80008aa:	6a62      	ldr	r2, [r4, #36]	; 0x24
 80008ac:	e790      	b.n	80007d0 <HAL_RCC_OscConfig+0x2f4>
 80008ae:	fa97 f3a7 	rbit	r3, r7
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80008b2:	6a62      	ldr	r2, [r4, #36]	; 0x24
 80008b4:	e7cd      	b.n	8000852 <HAL_RCC_OscConfig+0x376>
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80008b6:	4c41      	ldr	r4, [pc, #260]	; (80009bc <HAL_RCC_OscConfig+0x4e0>)
 80008b8:	6863      	ldr	r3, [r4, #4]
 80008ba:	f003 030c 	and.w	r3, r3, #12
 80008be:	2b08      	cmp	r3, #8
 80008c0:	f43f ae45 	beq.w	800054e <HAL_RCC_OscConfig+0x72>
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80008c4:	2a02      	cmp	r2, #2
 80008c6:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80008ca:	d152      	bne.n	8000972 <HAL_RCC_OscConfig+0x496>
 80008cc:	fa93 f3a3 	rbit	r3, r3
        __HAL_RCC_PLL_DISABLE();
 80008d0:	fab3 f383 	clz	r3, r3
 80008d4:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 80008d8:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 80008dc:	009b      	lsls	r3, r3, #2
 80008de:	2200      	movs	r2, #0
 80008e0:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 80008e2:	f7ff fcb3 	bl	800024c <HAL_GetTick>
 80008e6:	f04f 7700 	mov.w	r7, #33554432	; 0x2000000
 80008ea:	4680      	mov	r8, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80008ec:	2601      	movs	r6, #1
 80008ee:	fa97 f3a7 	rbit	r3, r7
 80008f2:	6822      	ldr	r2, [r4, #0]
 80008f4:	fa97 f3a7 	rbit	r3, r7
 80008f8:	fab3 f383 	clz	r3, r3
 80008fc:	f003 031f 	and.w	r3, r3, #31
 8000900:	fa06 f303 	lsl.w	r3, r6, r3
 8000904:	4213      	tst	r3, r2
 8000906:	d12d      	bne.n	8000964 <HAL_RCC_OscConfig+0x488>
      __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8000908:	6862      	ldr	r2, [r4, #4]
 800090a:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800090c:	6a29      	ldr	r1, [r5, #32]
 800090e:	f422 1274 	bic.w	r2, r2, #3997696	; 0x3d0000
 8000912:	430b      	orrs	r3, r1
 8000914:	4313      	orrs	r3, r2
 8000916:	6063      	str	r3, [r4, #4]
 8000918:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800091c:	fa93 f3a3 	rbit	r3, r3
        __HAL_RCC_PLL_ENABLE();
 8000920:	fab3 f383 	clz	r3, r3
 8000924:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8000928:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 800092c:	009b      	lsls	r3, r3, #2
 800092e:	f04f 7500 	mov.w	r5, #33554432	; 0x2000000
 8000932:	601e      	str	r6, [r3, #0]
        tickstart = HAL_GetTick();
 8000934:	f7ff fc8a 	bl	800024c <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8000938:	2601      	movs	r6, #1
        tickstart = HAL_GetTick();
 800093a:	4607      	mov	r7, r0
 800093c:	fa95 f3a5 	rbit	r3, r5
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8000940:	6822      	ldr	r2, [r4, #0]
 8000942:	fa95 f3a5 	rbit	r3, r5
 8000946:	fab3 f383 	clz	r3, r3
 800094a:	f003 031f 	and.w	r3, r3, #31
 800094e:	fa06 f303 	lsl.w	r3, r6, r3
 8000952:	4213      	tst	r3, r2
 8000954:	f47f add8 	bne.w	8000508 <HAL_RCC_OscConfig+0x2c>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8000958:	f7ff fc78 	bl	800024c <HAL_GetTick>
 800095c:	1bc0      	subs	r0, r0, r7
 800095e:	2802      	cmp	r0, #2
 8000960:	d9ec      	bls.n	800093c <HAL_RCC_OscConfig+0x460>
 8000962:	e620      	b.n	80005a6 <HAL_RCC_OscConfig+0xca>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8000964:	f7ff fc72 	bl	800024c <HAL_GetTick>
 8000968:	eba0 0008 	sub.w	r0, r0, r8
 800096c:	2802      	cmp	r0, #2
 800096e:	d9be      	bls.n	80008ee <HAL_RCC_OscConfig+0x412>
 8000970:	e619      	b.n	80005a6 <HAL_RCC_OscConfig+0xca>
 8000972:	fa93 f3a3 	rbit	r3, r3
        __HAL_RCC_PLL_DISABLE();
 8000976:	fab3 f383 	clz	r3, r3
 800097a:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 800097e:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8000982:	009b      	lsls	r3, r3, #2
 8000984:	2200      	movs	r2, #0
 8000986:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8000988:	f7ff fc60 	bl	800024c <HAL_GetTick>
 800098c:	f04f 7500 	mov.w	r5, #33554432	; 0x2000000
 8000990:	4607      	mov	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8000992:	2601      	movs	r6, #1
 8000994:	fa95 f3a5 	rbit	r3, r5
 8000998:	6822      	ldr	r2, [r4, #0]
 800099a:	fa95 f3a5 	rbit	r3, r5
 800099e:	fab3 f383 	clz	r3, r3
 80009a2:	f003 031f 	and.w	r3, r3, #31
 80009a6:	fa06 f303 	lsl.w	r3, r6, r3
 80009aa:	4213      	tst	r3, r2
 80009ac:	f43f adac 	beq.w	8000508 <HAL_RCC_OscConfig+0x2c>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80009b0:	f7ff fc4c 	bl	800024c <HAL_GetTick>
 80009b4:	1bc0      	subs	r0, r0, r7
 80009b6:	2802      	cmp	r0, #2
 80009b8:	d9ec      	bls.n	8000994 <HAL_RCC_OscConfig+0x4b8>
 80009ba:	e5f4      	b.n	80005a6 <HAL_RCC_OscConfig+0xca>
 80009bc:	40021000 	.word	0x40021000

080009c0 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80009c0:	b510      	push	{r4, lr}
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
  uint32_t sysclockfreq = 0U;
  
  tmpreg = RCC->CFGR;
 80009c2:	4c13      	ldr	r4, [pc, #76]	; (8000a10 <HAL_RCC_GetSysClockFreq+0x50>)
 80009c4:	6861      	ldr	r1, [r4, #4]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80009c6:	f001 030c 	and.w	r3, r1, #12
 80009ca:	2b08      	cmp	r3, #8
 80009cc:	d11e      	bne.n	8000a0c <HAL_RCC_GetSysClockFreq+0x4c>
 80009ce:	f44f 1370 	mov.w	r3, #3932160	; 0x3c0000
 80009d2:	fa93 f3a3 	rbit	r3, r3
      sysclockfreq = HSE_VALUE;
      break;
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> POSITION_VAL(RCC_CFGR_PLLMUL)];
 80009d6:	f401 1270 	and.w	r2, r1, #3932160	; 0x3c0000
 80009da:	fab3 f383 	clz	r3, r3
 80009de:	fa22 f303 	lsr.w	r3, r2, r3
 80009e2:	4a0c      	ldr	r2, [pc, #48]	; (8000a14 <HAL_RCC_GetSysClockFreq+0x54>)
 80009e4:	5cd0      	ldrb	r0, [r2, r3]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> POSITION_VAL(RCC_CFGR2_PREDIV)];
 80009e6:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 80009e8:	220f      	movs	r2, #15
 80009ea:	fa92 f2a2 	rbit	r2, r2
 80009ee:	fab2 f282 	clz	r2, r2
 80009f2:	f003 030f 	and.w	r3, r3, #15
 80009f6:	40d3      	lsrs	r3, r2
 80009f8:	4a07      	ldr	r2, [pc, #28]	; (8000a18 <HAL_RCC_GetSysClockFreq+0x58>)
 80009fa:	5cd2      	ldrb	r2, [r2, r3]
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI)
 80009fc:	03cb      	lsls	r3, r1, #15
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (HSE_VALUE / prediv) * pllmul;
 80009fe:	bf4a      	itet	mi
 8000a00:	4b06      	ldrmi	r3, [pc, #24]	; (8000a1c <HAL_RCC_GetSysClockFreq+0x5c>)
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (HSI_VALUE >> 1U) * pllmul;
 8000a02:	4b07      	ldrpl	r3, [pc, #28]	; (8000a20 <HAL_RCC_GetSysClockFreq+0x60>)
        pllclk = (HSE_VALUE / prediv) * pllmul;
 8000a04:	fbb3 f3f2 	udivmi	r3, r3, r2
        pllclk = (HSI_VALUE >> 1U) * pllmul;
 8000a08:	4358      	muls	r0, r3
 8000a0a:	bd10      	pop	{r4, pc}
      sysclockfreq = HSE_VALUE;
 8000a0c:	4803      	ldr	r0, [pc, #12]	; (8000a1c <HAL_RCC_GetSysClockFreq+0x5c>)
      sysclockfreq = HSI_VALUE;
      break;
    }
  }
  return sysclockfreq;
}
 8000a0e:	bd10      	pop	{r4, pc}
 8000a10:	40021000 	.word	0x40021000
 8000a14:	0800166c 	.word	0x0800166c
 8000a18:	0800167c 	.word	0x0800167c
 8000a1c:	007a1200 	.word	0x007a1200
 8000a20:	003d0900 	.word	0x003d0900

08000a24 <HAL_RCC_ClockConfig>:
  if(FLatency > (FLASH->ACR & FLASH_ACR_LATENCY))
 8000a24:	4a5c      	ldr	r2, [pc, #368]	; (8000b98 <HAL_RCC_ClockConfig+0x174>)
 8000a26:	6813      	ldr	r3, [r2, #0]
 8000a28:	f003 0307 	and.w	r3, r3, #7
 8000a2c:	428b      	cmp	r3, r1
{
 8000a2e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8000a32:	4606      	mov	r6, r0
 8000a34:	460d      	mov	r5, r1
  if(FLatency > (FLASH->ACR & FLASH_ACR_LATENCY))
 8000a36:	d330      	bcc.n	8000a9a <HAL_RCC_ClockConfig+0x76>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8000a38:	6832      	ldr	r2, [r6, #0]
 8000a3a:	0791      	lsls	r1, r2, #30
 8000a3c:	d43a      	bmi.n	8000ab4 <HAL_RCC_ClockConfig+0x90>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8000a3e:	07d2      	lsls	r2, r2, #31
 8000a40:	d440      	bmi.n	8000ac4 <HAL_RCC_ClockConfig+0xa0>
  if(FLatency < (FLASH->ACR & FLASH_ACR_LATENCY))
 8000a42:	4a55      	ldr	r2, [pc, #340]	; (8000b98 <HAL_RCC_ClockConfig+0x174>)
 8000a44:	6813      	ldr	r3, [r2, #0]
 8000a46:	f003 0307 	and.w	r3, r3, #7
 8000a4a:	429d      	cmp	r5, r3
 8000a4c:	f0c0 8092 	bcc.w	8000b74 <HAL_RCC_ClockConfig+0x150>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8000a50:	6832      	ldr	r2, [r6, #0]
 8000a52:	4c52      	ldr	r4, [pc, #328]	; (8000b9c <HAL_RCC_ClockConfig+0x178>)
 8000a54:	f012 0f04 	tst.w	r2, #4
 8000a58:	f040 8097 	bne.w	8000b8a <HAL_RCC_ClockConfig+0x166>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8000a5c:	0713      	lsls	r3, r2, #28
 8000a5e:	d506      	bpl.n	8000a6e <HAL_RCC_ClockConfig+0x4a>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8000a60:	6863      	ldr	r3, [r4, #4]
 8000a62:	6932      	ldr	r2, [r6, #16]
 8000a64:	f423 5360 	bic.w	r3, r3, #14336	; 0x3800
 8000a68:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 8000a6c:	6063      	str	r3, [r4, #4]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8000a6e:	f7ff ffa7 	bl	80009c0 <HAL_RCC_GetSysClockFreq>
 8000a72:	6863      	ldr	r3, [r4, #4]
 8000a74:	22f0      	movs	r2, #240	; 0xf0
 8000a76:	fa92 f2a2 	rbit	r2, r2
 8000a7a:	fab2 f282 	clz	r2, r2
 8000a7e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8000a82:	40d3      	lsrs	r3, r2
 8000a84:	4a46      	ldr	r2, [pc, #280]	; (8000ba0 <HAL_RCC_ClockConfig+0x17c>)
 8000a86:	5cd3      	ldrb	r3, [r2, r3]
 8000a88:	40d8      	lsrs	r0, r3
 8000a8a:	4b46      	ldr	r3, [pc, #280]	; (8000ba4 <HAL_RCC_ClockConfig+0x180>)
 8000a8c:	6018      	str	r0, [r3, #0]
  HAL_InitTick (TICK_INT_PRIORITY);
 8000a8e:	2000      	movs	r0, #0
 8000a90:	f7ff fb9a 	bl	80001c8 <HAL_InitTick>
  return HAL_OK;
 8000a94:	2000      	movs	r0, #0
}
 8000a96:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    __HAL_FLASH_SET_LATENCY(FLatency);
 8000a9a:	6813      	ldr	r3, [r2, #0]
 8000a9c:	f023 0307 	bic.w	r3, r3, #7
 8000aa0:	430b      	orrs	r3, r1
 8000aa2:	6013      	str	r3, [r2, #0]
    if((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8000aa4:	6813      	ldr	r3, [r2, #0]
 8000aa6:	f003 0307 	and.w	r3, r3, #7
 8000aaa:	4299      	cmp	r1, r3
 8000aac:	d0c4      	beq.n	8000a38 <HAL_RCC_ClockConfig+0x14>
      return HAL_ERROR;
 8000aae:	2001      	movs	r0, #1
 8000ab0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8000ab4:	4939      	ldr	r1, [pc, #228]	; (8000b9c <HAL_RCC_ClockConfig+0x178>)
 8000ab6:	68b0      	ldr	r0, [r6, #8]
 8000ab8:	684b      	ldr	r3, [r1, #4]
 8000aba:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8000abe:	4303      	orrs	r3, r0
 8000ac0:	604b      	str	r3, [r1, #4]
 8000ac2:	e7bc      	b.n	8000a3e <HAL_RCC_ClockConfig+0x1a>
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8000ac4:	6872      	ldr	r2, [r6, #4]
 8000ac6:	4c35      	ldr	r4, [pc, #212]	; (8000b9c <HAL_RCC_ClockConfig+0x178>)
 8000ac8:	2a01      	cmp	r2, #1
 8000aca:	d128      	bne.n	8000b1e <HAL_RCC_ClockConfig+0xfa>
 8000acc:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8000ad0:	fa93 f1a3 	rbit	r1, r3
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000ad4:	6821      	ldr	r1, [r4, #0]
 8000ad6:	fa93 f3a3 	rbit	r3, r3
 8000ada:	fab3 f383 	clz	r3, r3
 8000ade:	f003 031f 	and.w	r3, r3, #31
 8000ae2:	fa02 f303 	lsl.w	r3, r2, r3
 8000ae6:	420b      	tst	r3, r1
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000ae8:	d0e1      	beq.n	8000aae <HAL_RCC_ClockConfig+0x8a>
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8000aea:	6863      	ldr	r3, [r4, #4]
 8000aec:	f023 0303 	bic.w	r3, r3, #3
 8000af0:	431a      	orrs	r2, r3
 8000af2:	6062      	str	r2, [r4, #4]
    tickstart = HAL_GetTick();
 8000af4:	f7ff fbaa 	bl	800024c <HAL_GetTick>
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8000af8:	6873      	ldr	r3, [r6, #4]
 8000afa:	2b01      	cmp	r3, #1
    tickstart = HAL_GetTick();
 8000afc:	4607      	mov	r7, r0
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8000afe:	f241 3888 	movw	r8, #5000	; 0x1388
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8000b02:	d11f      	bne.n	8000b44 <HAL_RCC_ClockConfig+0x120>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8000b04:	6863      	ldr	r3, [r4, #4]
 8000b06:	f003 030c 	and.w	r3, r3, #12
 8000b0a:	2b04      	cmp	r3, #4
 8000b0c:	d099      	beq.n	8000a42 <HAL_RCC_ClockConfig+0x1e>
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8000b0e:	f7ff fb9d 	bl	800024c <HAL_GetTick>
 8000b12:	1bc0      	subs	r0, r0, r7
 8000b14:	4540      	cmp	r0, r8
 8000b16:	d9f5      	bls.n	8000b04 <HAL_RCC_ClockConfig+0xe0>
          return HAL_TIMEOUT;
 8000b18:	2003      	movs	r0, #3
 8000b1a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8000b1e:	2a02      	cmp	r2, #2
 8000b20:	bf0c      	ite	eq
 8000b22:	f04f 7300 	moveq.w	r3, #33554432	; 0x2000000
 8000b26:	2302      	movne	r3, #2
 8000b28:	fa93 f1a3 	rbit	r1, r3
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000b2c:	6820      	ldr	r0, [r4, #0]
 8000b2e:	fa93 f3a3 	rbit	r3, r3
 8000b32:	fab3 f383 	clz	r3, r3
 8000b36:	f003 031f 	and.w	r3, r3, #31
 8000b3a:	2101      	movs	r1, #1
 8000b3c:	fa01 f303 	lsl.w	r3, r1, r3
 8000b40:	4203      	tst	r3, r0
 8000b42:	e7d1      	b.n	8000ae8 <HAL_RCC_ClockConfig+0xc4>
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8000b44:	2b02      	cmp	r3, #2
 8000b46:	d110      	bne.n	8000b6a <HAL_RCC_ClockConfig+0x146>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8000b48:	6863      	ldr	r3, [r4, #4]
 8000b4a:	f003 030c 	and.w	r3, r3, #12
 8000b4e:	2b08      	cmp	r3, #8
 8000b50:	f43f af77 	beq.w	8000a42 <HAL_RCC_ClockConfig+0x1e>
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8000b54:	f7ff fb7a 	bl	800024c <HAL_GetTick>
 8000b58:	1bc0      	subs	r0, r0, r7
 8000b5a:	4540      	cmp	r0, r8
 8000b5c:	d9f4      	bls.n	8000b48 <HAL_RCC_ClockConfig+0x124>
 8000b5e:	e7db      	b.n	8000b18 <HAL_RCC_ClockConfig+0xf4>
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8000b60:	f7ff fb74 	bl	800024c <HAL_GetTick>
 8000b64:	1bc0      	subs	r0, r0, r7
 8000b66:	4540      	cmp	r0, r8
 8000b68:	d8d6      	bhi.n	8000b18 <HAL_RCC_ClockConfig+0xf4>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8000b6a:	6863      	ldr	r3, [r4, #4]
 8000b6c:	f013 0f0c 	tst.w	r3, #12
 8000b70:	d1f6      	bne.n	8000b60 <HAL_RCC_ClockConfig+0x13c>
 8000b72:	e766      	b.n	8000a42 <HAL_RCC_ClockConfig+0x1e>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8000b74:	6813      	ldr	r3, [r2, #0]
 8000b76:	f023 0307 	bic.w	r3, r3, #7
 8000b7a:	432b      	orrs	r3, r5
 8000b7c:	6013      	str	r3, [r2, #0]
    if((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8000b7e:	6813      	ldr	r3, [r2, #0]
 8000b80:	f003 0307 	and.w	r3, r3, #7
 8000b84:	429d      	cmp	r5, r3
 8000b86:	d192      	bne.n	8000aae <HAL_RCC_ClockConfig+0x8a>
 8000b88:	e762      	b.n	8000a50 <HAL_RCC_ClockConfig+0x2c>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8000b8a:	6863      	ldr	r3, [r4, #4]
 8000b8c:	68f1      	ldr	r1, [r6, #12]
 8000b8e:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8000b92:	430b      	orrs	r3, r1
 8000b94:	6063      	str	r3, [r4, #4]
 8000b96:	e761      	b.n	8000a5c <HAL_RCC_ClockConfig+0x38>
 8000b98:	40022000 	.word	0x40022000
 8000b9c:	40021000 	.word	0x40021000
 8000ba0:	08001699 	.word	0x08001699
 8000ba4:	20000c08 	.word	0x20000c08

08000ba8 <HAL_RCC_GetHCLKFreq>:
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
  return SystemCoreClock;
}
 8000ba8:	4b01      	ldr	r3, [pc, #4]	; (8000bb0 <HAL_RCC_GetHCLKFreq+0x8>)
 8000baa:	6818      	ldr	r0, [r3, #0]
 8000bac:	4770      	bx	lr
 8000bae:	bf00      	nop
 8000bb0:	20000c08 	.word	0x20000c08

08000bb4 <SPI_WaitFifoStateUntilTimeout.part.1>:
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8000bb4:	6803      	ldr	r3, [r0, #0]
 8000bb6:	685a      	ldr	r2, [r3, #4]
 8000bb8:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8000bbc:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8000bbe:	6842      	ldr	r2, [r0, #4]
 8000bc0:	f5b2 7f82 	cmp.w	r2, #260	; 0x104
 8000bc4:	d10a      	bne.n	8000bdc <SPI_WaitFifoStateUntilTimeout.part.1+0x28>
 8000bc6:	6882      	ldr	r2, [r0, #8]
 8000bc8:	f5b2 4f00 	cmp.w	r2, #32768	; 0x8000
 8000bcc:	d002      	beq.n	8000bd4 <SPI_WaitFifoStateUntilTimeout.part.1+0x20>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8000bce:	f5b2 6f80 	cmp.w	r2, #1024	; 0x400
 8000bd2:	d103      	bne.n	8000bdc <SPI_WaitFifoStateUntilTimeout.part.1+0x28>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8000bd4:	681a      	ldr	r2, [r3, #0]
 8000bd6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8000bda:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8000bdc:	6a82      	ldr	r2, [r0, #40]	; 0x28
 8000bde:	f5b2 5f00 	cmp.w	r2, #8192	; 0x2000
 8000be2:	d107      	bne.n	8000bf4 <SPI_WaitFifoStateUntilTimeout.part.1+0x40>
        {
          SPI_RESET_CRC(hspi);
 8000be4:	681a      	ldr	r2, [r3, #0]
 8000be6:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8000bea:	601a      	str	r2, [r3, #0]
 8000bec:	681a      	ldr	r2, [r3, #0]
 8000bee:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8000bf2:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8000bf4:	2301      	movs	r3, #1
 8000bf6:	f880 305d 	strb.w	r3, [r0, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8000bfa:	2300      	movs	r3, #0
 8000bfc:	f880 305c 	strb.w	r3, [r0, #92]	; 0x5c
      }
    }
  }

  return HAL_OK;
}
 8000c00:	2003      	movs	r0, #3
 8000c02:	4770      	bx	lr

08000c04 <SPI_WaitFlagStateUntilTimeout.constprop.10>:
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, uint32_t State,
 8000c04:	b570      	push	{r4, r5, r6, lr}
 8000c06:	4605      	mov	r5, r0
 8000c08:	460c      	mov	r4, r1
 8000c0a:	4616      	mov	r6, r2
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8000c0c:	682b      	ldr	r3, [r5, #0]
 8000c0e:	6898      	ldr	r0, [r3, #8]
 8000c10:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8000c14:	d00d      	beq.n	8000c32 <SPI_WaitFlagStateUntilTimeout.constprop.10+0x2e>
    if (Timeout != HAL_MAX_DELAY)
 8000c16:	1c62      	adds	r2, r4, #1
 8000c18:	d0f9      	beq.n	8000c0e <SPI_WaitFlagStateUntilTimeout.constprop.10+0xa>
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) >= Timeout))
 8000c1a:	b924      	cbnz	r4, 8000c26 <SPI_WaitFlagStateUntilTimeout.constprop.10+0x22>
 8000c1c:	4628      	mov	r0, r5
}
 8000c1e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8000c22:	f7ff bfc7 	b.w	8000bb4 <SPI_WaitFifoStateUntilTimeout.part.1>
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) >= Timeout))
 8000c26:	f7ff fb11 	bl	800024c <HAL_GetTick>
 8000c2a:	1b80      	subs	r0, r0, r6
 8000c2c:	4284      	cmp	r4, r0
 8000c2e:	d8ed      	bhi.n	8000c0c <SPI_WaitFlagStateUntilTimeout.constprop.10+0x8>
 8000c30:	e7f4      	b.n	8000c1c <SPI_WaitFlagStateUntilTimeout.constprop.10+0x18>
}
 8000c32:	bd70      	pop	{r4, r5, r6, pc}

08000c34 <SPI_WaitFifoStateUntilTimeout.constprop.11>:
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
 8000c34:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8000c36:	4606      	mov	r6, r0
 8000c38:	460c      	mov	r4, r1
 8000c3a:	4615      	mov	r5, r2
 8000c3c:	461f      	mov	r7, r3
  while ((hspi->Instance->SR & Fifo) != State)
 8000c3e:	6831      	ldr	r1, [r6, #0]
 8000c40:	6888      	ldr	r0, [r1, #8]
 8000c42:	4020      	ands	r0, r4
 8000c44:	d00e      	beq.n	8000c64 <SPI_WaitFifoStateUntilTimeout.constprop.11+0x30>
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 8000c46:	f5b4 6fc0 	cmp.w	r4, #1536	; 0x600
      tmpreg = *((__IO uint8_t *)&hspi->Instance->DR);
 8000c4a:	bf01      	itttt	eq
 8000c4c:	7b0a      	ldrbeq	r2, [r1, #12]
 8000c4e:	b2d2      	uxtbeq	r2, r2
 8000c50:	f88d 2007 	strbeq.w	r2, [sp, #7]
      UNUSED(tmpreg);
 8000c54:	f89d 3007 	ldrbeq.w	r3, [sp, #7]
    if (Timeout != HAL_MAX_DELAY)
 8000c58:	1c6b      	adds	r3, r5, #1
 8000c5a:	d0f1      	beq.n	8000c40 <SPI_WaitFifoStateUntilTimeout.constprop.11+0xc>
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) >= Timeout))
 8000c5c:	b925      	cbnz	r5, 8000c68 <SPI_WaitFifoStateUntilTimeout.constprop.11+0x34>
 8000c5e:	4630      	mov	r0, r6
 8000c60:	f7ff ffa8 	bl	8000bb4 <SPI_WaitFifoStateUntilTimeout.part.1>
}
 8000c64:	b003      	add	sp, #12
 8000c66:	bdf0      	pop	{r4, r5, r6, r7, pc}
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) >= Timeout))
 8000c68:	f7ff faf0 	bl	800024c <HAL_GetTick>
 8000c6c:	1bc0      	subs	r0, r0, r7
 8000c6e:	4285      	cmp	r5, r0
 8000c70:	d8e5      	bhi.n	8000c3e <SPI_WaitFifoStateUntilTimeout.constprop.11+0xa>
 8000c72:	e7f4      	b.n	8000c5e <SPI_WaitFifoStateUntilTimeout.constprop.11+0x2a>

08000c74 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8000c74:	b570      	push	{r4, r5, r6, lr}
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8000c76:	4613      	mov	r3, r2
{
 8000c78:	460d      	mov	r5, r1
 8000c7a:	4616      	mov	r6, r2
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8000c7c:	460a      	mov	r2, r1
 8000c7e:	f44f 51c0 	mov.w	r1, #6144	; 0x1800
{
 8000c82:	4604      	mov	r4, r0
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8000c84:	f7ff ffd6 	bl	8000c34 <SPI_WaitFifoStateUntilTimeout.constprop.11>
 8000c88:	b128      	cbz	r0, 8000c96 <SPI_EndRxTxTransaction+0x22>
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8000c8a:	6e23      	ldr	r3, [r4, #96]	; 0x60
 8000c8c:	f043 0320 	orr.w	r3, r3, #32
 8000c90:	6623      	str	r3, [r4, #96]	; 0x60
      return HAL_TIMEOUT;
 8000c92:	2003      	movs	r0, #3
 8000c94:	e00f      	b.n	8000cb6 <SPI_EndRxTxTransaction+0x42>
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
    return HAL_TIMEOUT;
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8000c96:	4632      	mov	r2, r6
 8000c98:	4629      	mov	r1, r5
 8000c9a:	4620      	mov	r0, r4
 8000c9c:	f7ff ffb2 	bl	8000c04 <SPI_WaitFlagStateUntilTimeout.constprop.10>
 8000ca0:	2800      	cmp	r0, #0
 8000ca2:	d1f2      	bne.n	8000c8a <SPI_EndRxTxTransaction+0x16>
    if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8000ca4:	4633      	mov	r3, r6
 8000ca6:	462a      	mov	r2, r5
 8000ca8:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 8000cac:	4620      	mov	r0, r4
 8000cae:	f7ff ffc1 	bl	8000c34 <SPI_WaitFifoStateUntilTimeout.constprop.11>
 8000cb2:	2800      	cmp	r0, #0
 8000cb4:	d1e9      	bne.n	8000c8a <SPI_EndRxTxTransaction+0x16>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
    return HAL_TIMEOUT;
  }
  return HAL_OK;
}
 8000cb6:	bd70      	pop	{r4, r5, r6, pc}

08000cb8 <HAL_SPI_Init>:
{
 8000cb8:	b570      	push	{r4, r5, r6, lr}
  if (hspi == NULL)
 8000cba:	4604      	mov	r4, r0
 8000cbc:	2800      	cmp	r0, #0
 8000cbe:	d04a      	beq.n	8000d56 <HAL_SPI_Init+0x9e>
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000cc0:	2300      	movs	r3, #0
 8000cc2:	6283      	str	r3, [r0, #40]	; 0x28
  if (hspi->State == HAL_SPI_STATE_RESET)
 8000cc4:	f890 305d 	ldrb.w	r3, [r0, #93]	; 0x5d
 8000cc8:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8000ccc:	b91b      	cbnz	r3, 8000cd6 <HAL_SPI_Init+0x1e>
    hspi->Lock = HAL_UNLOCKED;
 8000cce:	f880 205c 	strb.w	r2, [r0, #92]	; 0x5c
    HAL_SPI_MspInit(hspi);
 8000cd2:	f000 fbcb 	bl	800146c <HAL_SPI_MspInit>
  hspi->State = HAL_SPI_STATE_BUSY;
 8000cd6:	2302      	movs	r3, #2
  __HAL_SPI_DISABLE(hspi);
 8000cd8:	6821      	ldr	r1, [r4, #0]
  hspi->State = HAL_SPI_STATE_BUSY;
 8000cda:	f884 305d 	strb.w	r3, [r4, #93]	; 0x5d
  __HAL_SPI_DISABLE(hspi);
 8000cde:	680b      	ldr	r3, [r1, #0]
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8000ce0:	68e2      	ldr	r2, [r4, #12]
  __HAL_SPI_DISABLE(hspi);
 8000ce2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8000ce6:	f5b2 6fe0 	cmp.w	r2, #1792	; 0x700
  __HAL_SPI_DISABLE(hspi);
 8000cea:	600b      	str	r3, [r1, #0]
 8000cec:	f04f 0300 	mov.w	r3, #0
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8000cf0:	d92e      	bls.n	8000d50 <HAL_SPI_Init+0x98>
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8000cf2:	4618      	mov	r0, r3
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8000cf4:	f5b2 6f70 	cmp.w	r2, #3840	; 0xf00
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000cf8:	bf18      	it	ne
 8000cfa:	62a3      	strne	r3, [r4, #40]	; 0x28
  if (hspi->Init.CRCLength == SPI_CRC_LENGTH_DATASIZE)
 8000cfc:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8000cfe:	b92b      	cbnz	r3, 8000d0c <HAL_SPI_Init+0x54>
    if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8000d00:	f5b2 6fe0 	cmp.w	r2, #1792	; 0x700
      hspi->Init.CRCLength = SPI_CRC_LENGTH_16BIT;
 8000d04:	bf8c      	ite	hi
 8000d06:	2302      	movhi	r3, #2
      hspi->Init.CRCLength = SPI_CRC_LENGTH_8BIT;
 8000d08:	2301      	movls	r3, #1
 8000d0a:	6323      	str	r3, [r4, #48]	; 0x30
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction |
 8000d0c:	68a6      	ldr	r6, [r4, #8]
 8000d0e:	6863      	ldr	r3, [r4, #4]
 8000d10:	69a5      	ldr	r5, [r4, #24]
 8000d12:	4333      	orrs	r3, r6
 8000d14:	6926      	ldr	r6, [r4, #16]
 8000d16:	4333      	orrs	r3, r6
 8000d18:	6966      	ldr	r6, [r4, #20]
 8000d1a:	4333      	orrs	r3, r6
 8000d1c:	69e6      	ldr	r6, [r4, #28]
 8000d1e:	4333      	orrs	r3, r6
 8000d20:	6a26      	ldr	r6, [r4, #32]
 8000d22:	4333      	orrs	r3, r6
 8000d24:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8000d26:	4333      	orrs	r3, r6
 8000d28:	f405 7600 	and.w	r6, r5, #512	; 0x200
 8000d2c:	4333      	orrs	r3, r6
 8000d2e:	600b      	str	r3, [r1, #0]
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode |
 8000d30:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8000d32:	431a      	orrs	r2, r3
 8000d34:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8000d36:	0c2d      	lsrs	r5, r5, #16
 8000d38:	431a      	orrs	r2, r3
 8000d3a:	f005 0504 	and.w	r5, r5, #4
 8000d3e:	432a      	orrs	r2, r5
 8000d40:	4302      	orrs	r2, r0
  hspi->State     = HAL_SPI_STATE_READY;
 8000d42:	2301      	movs	r3, #1
  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8000d44:	2000      	movs	r0, #0
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode |
 8000d46:	604a      	str	r2, [r1, #4]
  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8000d48:	6620      	str	r0, [r4, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8000d4a:	f884 305d 	strb.w	r3, [r4, #93]	; 0x5d
  return HAL_OK;
 8000d4e:	bd70      	pop	{r4, r5, r6, pc}
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8000d50:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 8000d54:	e7d0      	b.n	8000cf8 <HAL_SPI_Init+0x40>
    return HAL_ERROR;
 8000d56:	2001      	movs	r0, #1
}
 8000d58:	bd70      	pop	{r4, r5, r6, pc}

08000d5a <HAL_SPI_Transmit>:
{
 8000d5a:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 8000d5e:	461e      	mov	r6, r3
  __HAL_LOCK(hspi);
 8000d60:	f890 305c 	ldrb.w	r3, [r0, #92]	; 0x5c
 8000d64:	2b01      	cmp	r3, #1
{
 8000d66:	4604      	mov	r4, r0
 8000d68:	460d      	mov	r5, r1
 8000d6a:	4690      	mov	r8, r2
  __HAL_LOCK(hspi);
 8000d6c:	f000 80b1 	beq.w	8000ed2 <HAL_SPI_Transmit+0x178>
 8000d70:	2301      	movs	r3, #1
 8000d72:	f880 305c 	strb.w	r3, [r0, #92]	; 0x5c
  tickstart = HAL_GetTick();
 8000d76:	f7ff fa69 	bl	800024c <HAL_GetTick>
 8000d7a:	4607      	mov	r7, r0
  if (hspi->State != HAL_SPI_STATE_READY)
 8000d7c:	f894 005d 	ldrb.w	r0, [r4, #93]	; 0x5d
 8000d80:	b2c0      	uxtb	r0, r0
 8000d82:	2801      	cmp	r0, #1
 8000d84:	f040 80a3 	bne.w	8000ece <HAL_SPI_Transmit+0x174>
  if ((pData == NULL) || (Size == 0U))
 8000d88:	2d00      	cmp	r5, #0
 8000d8a:	d057      	beq.n	8000e3c <HAL_SPI_Transmit+0xe2>
 8000d8c:	f1b8 0f00 	cmp.w	r8, #0
 8000d90:	d054      	beq.n	8000e3c <HAL_SPI_Transmit+0xe2>
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8000d92:	2303      	movs	r3, #3
 8000d94:	f884 305d 	strb.w	r3, [r4, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8000d98:	2300      	movs	r3, #0
 8000d9a:	6623      	str	r3, [r4, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8000d9c:	6423      	str	r3, [r4, #64]	; 0x40
  hspi->TxXferCount = Size;
 8000d9e:	f8a4 803e 	strh.w	r8, [r4, #62]	; 0x3e
  hspi->RxXferSize  = 0U;
 8000da2:	f8a4 3044 	strh.w	r3, [r4, #68]	; 0x44
  hspi->RxXferCount = 0U;
 8000da6:	f8a4 3046 	strh.w	r3, [r4, #70]	; 0x46
  hspi->TxISR       = NULL;
 8000daa:	6523      	str	r3, [r4, #80]	; 0x50
  hspi->RxISR       = NULL;
 8000dac:	64e3      	str	r3, [r4, #76]	; 0x4c
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8000dae:	68a3      	ldr	r3, [r4, #8]
 8000db0:	6820      	ldr	r0, [r4, #0]
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8000db2:	63a5      	str	r5, [r4, #56]	; 0x38
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8000db4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
    SPI_1LINE_TX(hspi);
 8000db8:	bf08      	it	eq
 8000dba:	6803      	ldreq	r3, [r0, #0]
  hspi->TxXferSize  = Size;
 8000dbc:	f8a4 803c 	strh.w	r8, [r4, #60]	; 0x3c
    SPI_1LINE_TX(hspi);
 8000dc0:	bf04      	itt	eq
 8000dc2:	f443 4380 	orreq.w	r3, r3, #16384	; 0x4000
 8000dc6:	6003      	streq	r3, [r0, #0]
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8000dc8:	6803      	ldr	r3, [r0, #0]
 8000dca:	065b      	lsls	r3, r3, #25
    __HAL_SPI_ENABLE(hspi);
 8000dcc:	bf5e      	ittt	pl
 8000dce:	6803      	ldrpl	r3, [r0, #0]
 8000dd0:	f043 0340 	orrpl.w	r3, r3, #64	; 0x40
 8000dd4:	6003      	strpl	r3, [r0, #0]
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8000dd6:	68e3      	ldr	r3, [r4, #12]
 8000dd8:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8000ddc:	6863      	ldr	r3, [r4, #4]
 8000dde:	d93e      	bls.n	8000e5e <HAL_SPI_Transmit+0x104>
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (hspi->TxXferCount == 0x01U))
 8000de0:	b11b      	cbz	r3, 8000dea <HAL_SPI_Transmit+0x90>
 8000de2:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8000de4:	b29b      	uxth	r3, r3
 8000de6:	2b01      	cmp	r3, #1
 8000de8:	d106      	bne.n	8000df8 <HAL_SPI_Transmit+0x9e>
      hspi->Instance->DR = *((uint16_t *)pData);
 8000dea:	f835 3b02 	ldrh.w	r3, [r5], #2
 8000dee:	60c3      	str	r3, [r0, #12]
        hspi->TxXferCount--;
 8000df0:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8000df2:	3b01      	subs	r3, #1
 8000df4:	b29b      	uxth	r3, r3
 8000df6:	87e3      	strh	r3, [r4, #62]	; 0x3e
    while (hspi->TxXferCount > 0U)
 8000df8:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8000dfa:	b29b      	uxth	r3, r3
 8000dfc:	b9a3      	cbnz	r3, 8000e28 <HAL_SPI_Transmit+0xce>
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8000dfe:	463a      	mov	r2, r7
 8000e00:	4631      	mov	r1, r6
 8000e02:	4620      	mov	r0, r4
 8000e04:	f7ff ff36 	bl	8000c74 <SPI_EndRxTxTransaction>
 8000e08:	2800      	cmp	r0, #0
 8000e0a:	d15d      	bne.n	8000ec8 <HAL_SPI_Transmit+0x16e>
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8000e0c:	68a3      	ldr	r3, [r4, #8]
 8000e0e:	b933      	cbnz	r3, 8000e1e <HAL_SPI_Transmit+0xc4>
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8000e10:	9301      	str	r3, [sp, #4]
 8000e12:	6823      	ldr	r3, [r4, #0]
 8000e14:	68da      	ldr	r2, [r3, #12]
 8000e16:	9201      	str	r2, [sp, #4]
 8000e18:	689b      	ldr	r3, [r3, #8]
 8000e1a:	9301      	str	r3, [sp, #4]
 8000e1c:	9b01      	ldr	r3, [sp, #4]
  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8000e1e:	6e20      	ldr	r0, [r4, #96]	; 0x60
    errorcode = HAL_BUSY;
 8000e20:	3000      	adds	r0, #0
 8000e22:	bf18      	it	ne
 8000e24:	2001      	movne	r0, #1
 8000e26:	e009      	b.n	8000e3c <HAL_SPI_Transmit+0xe2>
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8000e28:	6823      	ldr	r3, [r4, #0]
 8000e2a:	689a      	ldr	r2, [r3, #8]
 8000e2c:	0790      	lsls	r0, r2, #30
 8000e2e:	d503      	bpl.n	8000e38 <HAL_SPI_Transmit+0xde>
        hspi->Instance->DR = *((uint16_t *)pData);
 8000e30:	f835 2b02 	ldrh.w	r2, [r5], #2
 8000e34:	60da      	str	r2, [r3, #12]
 8000e36:	e7db      	b.n	8000df0 <HAL_SPI_Transmit+0x96>
        if ((Timeout == 0U) || ((Timeout != HAL_MAX_DELAY) && ((HAL_GetTick() - tickstart) >=  Timeout)))
 8000e38:	b94e      	cbnz	r6, 8000e4e <HAL_SPI_Transmit+0xf4>
          errorcode = HAL_TIMEOUT;
 8000e3a:	2003      	movs	r0, #3
  hspi->State = HAL_SPI_STATE_READY;
 8000e3c:	2301      	movs	r3, #1
 8000e3e:	f884 305d 	strb.w	r3, [r4, #93]	; 0x5d
  __HAL_UNLOCK(hspi);
 8000e42:	2300      	movs	r3, #0
 8000e44:	f884 305c 	strb.w	r3, [r4, #92]	; 0x5c
}
 8000e48:	b002      	add	sp, #8
 8000e4a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        if ((Timeout == 0U) || ((Timeout != HAL_MAX_DELAY) && ((HAL_GetTick() - tickstart) >=  Timeout)))
 8000e4e:	1c71      	adds	r1, r6, #1
 8000e50:	d0d2      	beq.n	8000df8 <HAL_SPI_Transmit+0x9e>
 8000e52:	f7ff f9fb 	bl	800024c <HAL_GetTick>
 8000e56:	1bc0      	subs	r0, r0, r7
 8000e58:	4286      	cmp	r6, r0
 8000e5a:	d8cd      	bhi.n	8000df8 <HAL_SPI_Transmit+0x9e>
 8000e5c:	e7ed      	b.n	8000e3a <HAL_SPI_Transmit+0xe0>
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (hspi->TxXferCount == 0x01U))
 8000e5e:	b11b      	cbz	r3, 8000e68 <HAL_SPI_Transmit+0x10e>
 8000e60:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8000e62:	b29b      	uxth	r3, r3
 8000e64:	2b01      	cmp	r3, #1
 8000e66:	d10a      	bne.n	8000e7e <HAL_SPI_Transmit+0x124>
      if (hspi->TxXferCount > 1U)
 8000e68:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8000e6a:	b29b      	uxth	r3, r3
 8000e6c:	2b01      	cmp	r3, #1
 8000e6e:	d916      	bls.n	8000e9e <HAL_SPI_Transmit+0x144>
        hspi->Instance->DR = *((uint16_t *)pData);
 8000e70:	f835 3b02 	ldrh.w	r3, [r5], #2
 8000e74:	60c3      	str	r3, [r0, #12]
          hspi->TxXferCount -= 2U;
 8000e76:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8000e78:	3b02      	subs	r3, #2
 8000e7a:	b29b      	uxth	r3, r3
 8000e7c:	87e3      	strh	r3, [r4, #62]	; 0x3e
    while (hspi->TxXferCount > 0U)
 8000e7e:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8000e80:	b29b      	uxth	r3, r3
 8000e82:	2b00      	cmp	r3, #0
 8000e84:	d0bb      	beq.n	8000dfe <HAL_SPI_Transmit+0xa4>
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8000e86:	6823      	ldr	r3, [r4, #0]
 8000e88:	689a      	ldr	r2, [r3, #8]
 8000e8a:	0792      	lsls	r2, r2, #30
 8000e8c:	d512      	bpl.n	8000eb4 <HAL_SPI_Transmit+0x15a>
        if (hspi->TxXferCount > 1U)
 8000e8e:	8fe2      	ldrh	r2, [r4, #62]	; 0x3e
 8000e90:	b292      	uxth	r2, r2
 8000e92:	2a01      	cmp	r2, #1
 8000e94:	d90b      	bls.n	8000eae <HAL_SPI_Transmit+0x154>
          hspi->Instance->DR = *((uint16_t *)pData);
 8000e96:	f835 2b02 	ldrh.w	r2, [r5], #2
 8000e9a:	60da      	str	r2, [r3, #12]
 8000e9c:	e7eb      	b.n	8000e76 <HAL_SPI_Transmit+0x11c>
        *((__IO uint8_t *)&hspi->Instance->DR) = (*pData++);
 8000e9e:	782b      	ldrb	r3, [r5, #0]
 8000ea0:	7303      	strb	r3, [r0, #12]
          hspi->TxXferCount--;
 8000ea2:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8000ea4:	3b01      	subs	r3, #1
 8000ea6:	b29b      	uxth	r3, r3
 8000ea8:	87e3      	strh	r3, [r4, #62]	; 0x3e
          *((__IO uint8_t *)&hspi->Instance->DR) = (*pData++);
 8000eaa:	3501      	adds	r5, #1
 8000eac:	e7e7      	b.n	8000e7e <HAL_SPI_Transmit+0x124>
 8000eae:	782a      	ldrb	r2, [r5, #0]
 8000eb0:	731a      	strb	r2, [r3, #12]
 8000eb2:	e7f6      	b.n	8000ea2 <HAL_SPI_Transmit+0x148>
        if ((Timeout == 0U) || ((Timeout != HAL_MAX_DELAY) && ((HAL_GetTick() - tickstart) >=  Timeout)))
 8000eb4:	2e00      	cmp	r6, #0
 8000eb6:	d0c0      	beq.n	8000e3a <HAL_SPI_Transmit+0xe0>
 8000eb8:	1c73      	adds	r3, r6, #1
 8000eba:	d0e0      	beq.n	8000e7e <HAL_SPI_Transmit+0x124>
 8000ebc:	f7ff f9c6 	bl	800024c <HAL_GetTick>
 8000ec0:	1bc0      	subs	r0, r0, r7
 8000ec2:	4286      	cmp	r6, r0
 8000ec4:	d8db      	bhi.n	8000e7e <HAL_SPI_Transmit+0x124>
 8000ec6:	e7b8      	b.n	8000e3a <HAL_SPI_Transmit+0xe0>
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8000ec8:	2320      	movs	r3, #32
 8000eca:	6623      	str	r3, [r4, #96]	; 0x60
 8000ecc:	e79e      	b.n	8000e0c <HAL_SPI_Transmit+0xb2>
    errorcode = HAL_BUSY;
 8000ece:	2002      	movs	r0, #2
 8000ed0:	e7b4      	b.n	8000e3c <HAL_SPI_Transmit+0xe2>
  __HAL_LOCK(hspi);
 8000ed2:	2002      	movs	r0, #2
 8000ed4:	e7b8      	b.n	8000e48 <HAL_SPI_Transmit+0xee>

08000ed6 <HAL_SPI_TransmitReceive>:
{
 8000ed6:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8000eda:	461f      	mov	r7, r3
  __HAL_LOCK(hspi);
 8000edc:	f890 305c 	ldrb.w	r3, [r0, #92]	; 0x5c
{
 8000ee0:	f8dd 8020 	ldr.w	r8, [sp, #32]
  __HAL_LOCK(hspi);
 8000ee4:	2b01      	cmp	r3, #1
{
 8000ee6:	4604      	mov	r4, r0
 8000ee8:	460d      	mov	r5, r1
 8000eea:	4616      	mov	r6, r2
  __HAL_LOCK(hspi);
 8000eec:	f000 811c 	beq.w	8001128 <HAL_SPI_TransmitReceive+0x252>
 8000ef0:	2301      	movs	r3, #1
 8000ef2:	f880 305c 	strb.w	r3, [r0, #92]	; 0x5c
  tickstart = HAL_GetTick();
 8000ef6:	f7ff f9a9 	bl	800024c <HAL_GetTick>
  tmp  = hspi->State;
 8000efa:	f894 305d 	ldrb.w	r3, [r4, #93]	; 0x5d
  tmp1 = hspi->Init.Mode;
 8000efe:	6861      	ldr	r1, [r4, #4]
  tmp  = hspi->State;
 8000f00:	b2db      	uxtb	r3, r3
  if (!((tmp == HAL_SPI_STATE_READY) || \
 8000f02:	2b01      	cmp	r3, #1
  tickstart = HAL_GetTick();
 8000f04:	4681      	mov	r9, r0
  if (!((tmp == HAL_SPI_STATE_READY) || \
 8000f06:	d00a      	beq.n	8000f1e <HAL_SPI_TransmitReceive+0x48>
 8000f08:	f5b1 7f82 	cmp.w	r1, #260	; 0x104
 8000f0c:	f040 8108 	bne.w	8001120 <HAL_SPI_TransmitReceive+0x24a>
        ((tmp1 == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp == HAL_SPI_STATE_BUSY_RX))))
 8000f10:	68a2      	ldr	r2, [r4, #8]
 8000f12:	2a00      	cmp	r2, #0
 8000f14:	f040 8104 	bne.w	8001120 <HAL_SPI_TransmitReceive+0x24a>
 8000f18:	2b04      	cmp	r3, #4
 8000f1a:	f040 8101 	bne.w	8001120 <HAL_SPI_TransmitReceive+0x24a>
  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8000f1e:	2d00      	cmp	r5, #0
 8000f20:	f000 8100 	beq.w	8001124 <HAL_SPI_TransmitReceive+0x24e>
 8000f24:	2e00      	cmp	r6, #0
 8000f26:	f000 80fd 	beq.w	8001124 <HAL_SPI_TransmitReceive+0x24e>
 8000f2a:	2f00      	cmp	r7, #0
 8000f2c:	f000 80fa 	beq.w	8001124 <HAL_SPI_TransmitReceive+0x24e>
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8000f30:	f894 305d 	ldrb.w	r3, [r4, #93]	; 0x5d
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (hspi->RxXferCount > 1U))
 8000f34:	68e0      	ldr	r0, [r4, #12]
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8000f36:	6426      	str	r6, [r4, #64]	; 0x40
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8000f38:	2b04      	cmp	r3, #4
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8000f3a:	bf1c      	itt	ne
 8000f3c:	2305      	movne	r3, #5
 8000f3e:	f884 305d 	strbne.w	r3, [r4, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8000f42:	2300      	movs	r3, #0
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (hspi->RxXferCount > 1U))
 8000f44:	f5b0 6fe0 	cmp.w	r0, #1792	; 0x700
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8000f48:	6623      	str	r3, [r4, #96]	; 0x60
  hspi->RxISR       = NULL;
 8000f4a:	64e3      	str	r3, [r4, #76]	; 0x4c
  hspi->RxXferCount = Size;
 8000f4c:	f8a4 7046 	strh.w	r7, [r4, #70]	; 0x46
  hspi->TxISR       = NULL;
 8000f50:	6523      	str	r3, [r4, #80]	; 0x50
  hspi->RxXferSize  = Size;
 8000f52:	f8a4 7044 	strh.w	r7, [r4, #68]	; 0x44
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8000f56:	63a5      	str	r5, [r4, #56]	; 0x38
  hspi->TxXferCount = Size;
 8000f58:	87e7      	strh	r7, [r4, #62]	; 0x3e
  hspi->TxXferSize  = Size;
 8000f5a:	87a7      	strh	r7, [r4, #60]	; 0x3c
 8000f5c:	6823      	ldr	r3, [r4, #0]
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (hspi->RxXferCount > 1U))
 8000f5e:	d804      	bhi.n	8000f6a <HAL_SPI_TransmitReceive+0x94>
 8000f60:	f8b4 2046 	ldrh.w	r2, [r4, #70]	; 0x46
 8000f64:	b292      	uxth	r2, r2
 8000f66:	2a01      	cmp	r2, #1
 8000f68:	d92e      	bls.n	8000fc8 <HAL_SPI_TransmitReceive+0xf2>
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8000f6a:	685a      	ldr	r2, [r3, #4]
 8000f6c:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8000f70:	605a      	str	r2, [r3, #4]
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8000f72:	681a      	ldr	r2, [r3, #0]
 8000f74:	0657      	lsls	r7, r2, #25
    __HAL_SPI_ENABLE(hspi);
 8000f76:	bf5e      	ittt	pl
 8000f78:	681a      	ldrpl	r2, [r3, #0]
 8000f7a:	f042 0240 	orrpl.w	r2, r2, #64	; 0x40
 8000f7e:	601a      	strpl	r2, [r3, #0]
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8000f80:	f5b0 6fe0 	cmp.w	r0, #1792	; 0x700
 8000f84:	d958      	bls.n	8001038 <HAL_SPI_TransmitReceive+0x162>
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (hspi->TxXferCount == 0x01U))
 8000f86:	b119      	cbz	r1, 8000f90 <HAL_SPI_TransmitReceive+0xba>
 8000f88:	8fe2      	ldrh	r2, [r4, #62]	; 0x3e
 8000f8a:	b292      	uxth	r2, r2
 8000f8c:	2a01      	cmp	r2, #1
 8000f8e:	d106      	bne.n	8000f9e <HAL_SPI_TransmitReceive+0xc8>
      hspi->Instance->DR = *((uint16_t *)pTxData);
 8000f90:	f835 2b02 	ldrh.w	r2, [r5], #2
 8000f94:	60da      	str	r2, [r3, #12]
      hspi->TxXferCount--;
 8000f96:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8000f98:	3b01      	subs	r3, #1
 8000f9a:	b29b      	uxth	r3, r3
 8000f9c:	87e3      	strh	r3, [r4, #62]	; 0x3e
        txallowed = 1U;
 8000f9e:	2701      	movs	r7, #1
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8000fa0:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8000fa2:	b29b      	uxth	r3, r3
 8000fa4:	b9a3      	cbnz	r3, 8000fd0 <HAL_SPI_TransmitReceive+0xfa>
 8000fa6:	f8b4 3046 	ldrh.w	r3, [r4, #70]	; 0x46
 8000faa:	b29b      	uxth	r3, r3
 8000fac:	b983      	cbnz	r3, 8000fd0 <HAL_SPI_TransmitReceive+0xfa>
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8000fae:	464a      	mov	r2, r9
 8000fb0:	4641      	mov	r1, r8
 8000fb2:	4620      	mov	r0, r4
 8000fb4:	f7ff fe5e 	bl	8000c74 <SPI_EndRxTxTransaction>
 8000fb8:	2800      	cmp	r0, #0
 8000fba:	f040 80ae 	bne.w	800111a <HAL_SPI_TransmitReceive+0x244>
  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8000fbe:	6e20      	ldr	r0, [r4, #96]	; 0x60
    errorcode = HAL_BUSY;
 8000fc0:	3000      	adds	r0, #0
 8000fc2:	bf18      	it	ne
 8000fc4:	2001      	movne	r0, #1
 8000fc6:	e02f      	b.n	8001028 <HAL_SPI_TransmitReceive+0x152>
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8000fc8:	685a      	ldr	r2, [r3, #4]
 8000fca:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8000fce:	e7cf      	b.n	8000f70 <HAL_SPI_TransmitReceive+0x9a>
      if (txallowed && (hspi->TxXferCount > 0U) && (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)))
 8000fd0:	b177      	cbz	r7, 8000ff0 <HAL_SPI_TransmitReceive+0x11a>
 8000fd2:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8000fd4:	b29b      	uxth	r3, r3
 8000fd6:	b15b      	cbz	r3, 8000ff0 <HAL_SPI_TransmitReceive+0x11a>
 8000fd8:	6823      	ldr	r3, [r4, #0]
 8000fda:	689a      	ldr	r2, [r3, #8]
 8000fdc:	0792      	lsls	r2, r2, #30
 8000fde:	d507      	bpl.n	8000ff0 <HAL_SPI_TransmitReceive+0x11a>
        hspi->Instance->DR = *((uint16_t *)pTxData);
 8000fe0:	f835 2b02 	ldrh.w	r2, [r5], #2
 8000fe4:	60da      	str	r2, [r3, #12]
        hspi->TxXferCount--;
 8000fe6:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8000fe8:	3b01      	subs	r3, #1
 8000fea:	b29b      	uxth	r3, r3
 8000fec:	87e3      	strh	r3, [r4, #62]	; 0x3e
        txallowed = 0U;
 8000fee:	2700      	movs	r7, #0
      if ((hspi->RxXferCount > 0U) && (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)))
 8000ff0:	f8b4 3046 	ldrh.w	r3, [r4, #70]	; 0x46
 8000ff4:	b29b      	uxth	r3, r3
 8000ff6:	b16b      	cbz	r3, 8001014 <HAL_SPI_TransmitReceive+0x13e>
 8000ff8:	6823      	ldr	r3, [r4, #0]
 8000ffa:	689a      	ldr	r2, [r3, #8]
 8000ffc:	07d0      	lsls	r0, r2, #31
 8000ffe:	d509      	bpl.n	8001014 <HAL_SPI_TransmitReceive+0x13e>
        *((uint16_t *)pRxData) = hspi->Instance->DR;
 8001000:	68db      	ldr	r3, [r3, #12]
 8001002:	f826 3b02 	strh.w	r3, [r6], #2
        hspi->RxXferCount--;
 8001006:	f8b4 3046 	ldrh.w	r3, [r4, #70]	; 0x46
 800100a:	3b01      	subs	r3, #1
 800100c:	b29b      	uxth	r3, r3
 800100e:	f8a4 3046 	strh.w	r3, [r4, #70]	; 0x46
        txallowed = 1U;
 8001012:	2701      	movs	r7, #1
      if ((Timeout != HAL_MAX_DELAY) && ((HAL_GetTick() - tickstart) >=  Timeout))
 8001014:	f1b8 3fff 	cmp.w	r8, #4294967295
 8001018:	d0c2      	beq.n	8000fa0 <HAL_SPI_TransmitReceive+0xca>
 800101a:	f7ff f917 	bl	800024c <HAL_GetTick>
 800101e:	eba0 0009 	sub.w	r0, r0, r9
 8001022:	4580      	cmp	r8, r0
 8001024:	d8bc      	bhi.n	8000fa0 <HAL_SPI_TransmitReceive+0xca>
        errorcode = HAL_TIMEOUT;
 8001026:	2003      	movs	r0, #3
  hspi->State = HAL_SPI_STATE_READY;
 8001028:	2301      	movs	r3, #1
 800102a:	f884 305d 	strb.w	r3, [r4, #93]	; 0x5d
  __HAL_UNLOCK(hspi);
 800102e:	2300      	movs	r3, #0
 8001030:	f884 305c 	strb.w	r3, [r4, #92]	; 0x5c
 8001034:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (hspi->TxXferCount == 0x01U))
 8001038:	b119      	cbz	r1, 8001042 <HAL_SPI_TransmitReceive+0x16c>
 800103a:	8fe2      	ldrh	r2, [r4, #62]	; 0x3e
 800103c:	b292      	uxth	r2, r2
 800103e:	2a01      	cmp	r2, #1
 8001040:	d10a      	bne.n	8001058 <HAL_SPI_TransmitReceive+0x182>
      if (hspi->TxXferCount > 1U)
 8001042:	8fe2      	ldrh	r2, [r4, #62]	; 0x3e
 8001044:	b292      	uxth	r2, r2
 8001046:	2a01      	cmp	r2, #1
 8001048:	d94d      	bls.n	80010e6 <HAL_SPI_TransmitReceive+0x210>
        hspi->Instance->DR = *((uint16_t *)pTxData);
 800104a:	f835 2b02 	ldrh.w	r2, [r5], #2
 800104e:	60da      	str	r2, [r3, #12]
        hspi->TxXferCount -= 2U;
 8001050:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8001052:	3b02      	subs	r3, #2
 8001054:	b29b      	uxth	r3, r3
 8001056:	87e3      	strh	r3, [r4, #62]	; 0x3e
        txallowed = 1U;
 8001058:	2701      	movs	r7, #1
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800105a:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 800105c:	b29b      	uxth	r3, r3
 800105e:	b923      	cbnz	r3, 800106a <HAL_SPI_TransmitReceive+0x194>
 8001060:	f8b4 3046 	ldrh.w	r3, [r4, #70]	; 0x46
 8001064:	b29b      	uxth	r3, r3
 8001066:	2b00      	cmp	r3, #0
 8001068:	d0a1      	beq.n	8000fae <HAL_SPI_TransmitReceive+0xd8>
      if (txallowed && (hspi->TxXferCount > 0U) && (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)))
 800106a:	b197      	cbz	r7, 8001092 <HAL_SPI_TransmitReceive+0x1bc>
 800106c:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 800106e:	b29b      	uxth	r3, r3
 8001070:	b17b      	cbz	r3, 8001092 <HAL_SPI_TransmitReceive+0x1bc>
 8001072:	6823      	ldr	r3, [r4, #0]
 8001074:	689a      	ldr	r2, [r3, #8]
 8001076:	0791      	lsls	r1, r2, #30
 8001078:	d50b      	bpl.n	8001092 <HAL_SPI_TransmitReceive+0x1bc>
        if (hspi->TxXferCount > 1U)
 800107a:	8fe2      	ldrh	r2, [r4, #62]	; 0x3e
 800107c:	b292      	uxth	r2, r2
 800107e:	2a01      	cmp	r2, #1
 8001080:	d939      	bls.n	80010f6 <HAL_SPI_TransmitReceive+0x220>
          hspi->Instance->DR = *((uint16_t *)pTxData);
 8001082:	f835 2b02 	ldrh.w	r2, [r5], #2
 8001086:	60da      	str	r2, [r3, #12]
          hspi->TxXferCount -= 2U;
 8001088:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 800108a:	3b02      	subs	r3, #2
 800108c:	b29b      	uxth	r3, r3
 800108e:	87e3      	strh	r3, [r4, #62]	; 0x3e
        txallowed = 0U;
 8001090:	2700      	movs	r7, #0
      if ((hspi->RxXferCount > 0U) && (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)))
 8001092:	f8b4 3046 	ldrh.w	r3, [r4, #70]	; 0x46
 8001096:	b29b      	uxth	r3, r3
 8001098:	b1db      	cbz	r3, 80010d2 <HAL_SPI_TransmitReceive+0x1fc>
 800109a:	6823      	ldr	r3, [r4, #0]
 800109c:	689a      	ldr	r2, [r3, #8]
 800109e:	07d2      	lsls	r2, r2, #31
 80010a0:	d517      	bpl.n	80010d2 <HAL_SPI_TransmitReceive+0x1fc>
        if (hspi->RxXferCount > 1U)
 80010a2:	f8b4 2046 	ldrh.w	r2, [r4, #70]	; 0x46
 80010a6:	b292      	uxth	r2, r2
 80010a8:	2a01      	cmp	r2, #1
 80010aa:	d92c      	bls.n	8001106 <HAL_SPI_TransmitReceive+0x230>
          *((uint16_t *)pRxData) = hspi->Instance->DR;
 80010ac:	68da      	ldr	r2, [r3, #12]
 80010ae:	f826 2b02 	strh.w	r2, [r6], #2
          hspi->RxXferCount -= 2U;
 80010b2:	f8b4 2046 	ldrh.w	r2, [r4, #70]	; 0x46
 80010b6:	3a02      	subs	r2, #2
 80010b8:	b292      	uxth	r2, r2
 80010ba:	f8a4 2046 	strh.w	r2, [r4, #70]	; 0x46
          if (hspi->RxXferCount <= 1U)
 80010be:	f8b4 2046 	ldrh.w	r2, [r4, #70]	; 0x46
 80010c2:	b292      	uxth	r2, r2
 80010c4:	2a01      	cmp	r2, #1
 80010c6:	d803      	bhi.n	80010d0 <HAL_SPI_TransmitReceive+0x1fa>
            SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80010c8:	685a      	ldr	r2, [r3, #4]
 80010ca:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 80010ce:	605a      	str	r2, [r3, #4]
        txallowed = 1U;
 80010d0:	2701      	movs	r7, #1
      if ((Timeout != HAL_MAX_DELAY) && ((HAL_GetTick() - tickstart) >=  Timeout))
 80010d2:	f1b8 3fff 	cmp.w	r8, #4294967295
 80010d6:	d0c0      	beq.n	800105a <HAL_SPI_TransmitReceive+0x184>
 80010d8:	f7ff f8b8 	bl	800024c <HAL_GetTick>
 80010dc:	eba0 0009 	sub.w	r0, r0, r9
 80010e0:	4580      	cmp	r8, r0
 80010e2:	d8ba      	bhi.n	800105a <HAL_SPI_TransmitReceive+0x184>
 80010e4:	e79f      	b.n	8001026 <HAL_SPI_TransmitReceive+0x150>
        *(__IO uint8_t *)&hspi->Instance->DR = (*pTxData++);
 80010e6:	782a      	ldrb	r2, [r5, #0]
 80010e8:	731a      	strb	r2, [r3, #12]
        hspi->TxXferCount--;
 80010ea:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 80010ec:	3b01      	subs	r3, #1
 80010ee:	b29b      	uxth	r3, r3
 80010f0:	87e3      	strh	r3, [r4, #62]	; 0x3e
        *(__IO uint8_t *)&hspi->Instance->DR = (*pTxData++);
 80010f2:	3501      	adds	r5, #1
 80010f4:	e7b0      	b.n	8001058 <HAL_SPI_TransmitReceive+0x182>
          *(__IO uint8_t *)&hspi->Instance->DR = (*pTxData++);
 80010f6:	782a      	ldrb	r2, [r5, #0]
 80010f8:	731a      	strb	r2, [r3, #12]
          hspi->TxXferCount--;
 80010fa:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 80010fc:	3b01      	subs	r3, #1
 80010fe:	b29b      	uxth	r3, r3
 8001100:	87e3      	strh	r3, [r4, #62]	; 0x3e
          *(__IO uint8_t *)&hspi->Instance->DR = (*pTxData++);
 8001102:	3501      	adds	r5, #1
 8001104:	e7c4      	b.n	8001090 <HAL_SPI_TransmitReceive+0x1ba>
          (*(uint8_t *)pRxData++) = *(__IO uint8_t *)&hspi->Instance->DR;
 8001106:	7b1b      	ldrb	r3, [r3, #12]
 8001108:	7033      	strb	r3, [r6, #0]
          hspi->RxXferCount--;
 800110a:	f8b4 3046 	ldrh.w	r3, [r4, #70]	; 0x46
 800110e:	3b01      	subs	r3, #1
 8001110:	b29b      	uxth	r3, r3
 8001112:	f8a4 3046 	strh.w	r3, [r4, #70]	; 0x46
          (*(uint8_t *)pRxData++) = *(__IO uint8_t *)&hspi->Instance->DR;
 8001116:	3601      	adds	r6, #1
 8001118:	e7da      	b.n	80010d0 <HAL_SPI_TransmitReceive+0x1fa>
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800111a:	2320      	movs	r3, #32
 800111c:	6623      	str	r3, [r4, #96]	; 0x60
 800111e:	e74e      	b.n	8000fbe <HAL_SPI_TransmitReceive+0xe8>
    errorcode = HAL_BUSY;
 8001120:	2002      	movs	r0, #2
 8001122:	e781      	b.n	8001028 <HAL_SPI_TransmitReceive+0x152>
    errorcode = HAL_ERROR;
 8001124:	2001      	movs	r0, #1
 8001126:	e77f      	b.n	8001028 <HAL_SPI_TransmitReceive+0x152>
  __HAL_LOCK(hspi);
 8001128:	2002      	movs	r0, #2
}
 800112a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

0800112e <HAL_SPI_GetState>:
  return hspi->State;
 800112e:	f890 005d 	ldrb.w	r0, [r0, #93]	; 0x5d
}
 8001132:	4770      	bx	lr

08001134 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8001134:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}

  GPIO_InitTypeDef GPIO_InitStruct;

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001136:	4b0f      	ldr	r3, [pc, #60]	; (8001174 <MX_GPIO_Init+0x40>)
 8001138:	695a      	ldr	r2, [r3, #20]
 800113a:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 800113e:	615a      	str	r2, [r3, #20]
 8001140:	695b      	ldr	r3, [r3, #20]
 8001142:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001146:	9300      	str	r3, [sp, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_RESET);
 8001148:	2200      	movs	r2, #0
 800114a:	2110      	movs	r1, #16
 800114c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001150:	9b00      	ldr	r3, [sp, #0]
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_RESET);
 8001152:	f7ff f9bd 	bl	80004d0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PA4 */
  GPIO_InitStruct.Pin = GPIO_PIN_4;
 8001156:	2310      	movs	r3, #16
 8001158:	9301      	str	r3, [sp, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800115a:	2301      	movs	r3, #1
 800115c:	9302      	str	r3, [sp, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800115e:	a901      	add	r1, sp, #4
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001160:	2300      	movs	r3, #0
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001162:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001166:	9303      	str	r3, [sp, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001168:	9304      	str	r3, [sp, #16]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800116a:	f7ff f8f7 	bl	800035c <HAL_GPIO_Init>

}
 800116e:	b007      	add	sp, #28
 8001170:	f85d fb04 	ldr.w	pc, [sp], #4
 8001174:	40021000 	.word	0x40021000

08001178 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001178:	b510      	push	{r4, lr}
 800117a:	b090      	sub	sp, #64	; 0x40
  RCC_OscInitTypeDef RCC_OscInitStruct;
  RCC_ClkInitTypeDef RCC_ClkInitStruct;

    /**Initializes the CPU, AHB and APB busses clocks 
    */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800117c:	2302      	movs	r3, #2
 800117e:	9306      	str	r3, [sp, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001180:	2301      	movs	r3, #1
 8001182:	930a      	str	r3, [sp, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = 16;
 8001184:	2310      	movs	r3, #16
 8001186:	930b      	str	r3, [sp, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001188:	a806      	add	r0, sp, #24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 800118a:	2300      	movs	r3, #0
 800118c:	930d      	str	r3, [sp, #52]	; 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800118e:	f7ff f9a5 	bl	80004dc <HAL_RCC_OscConfig>
 8001192:	4601      	mov	r1, r0
 8001194:	b100      	cbz	r0, 8001198 <SystemClock_Config+0x20>
 8001196:	e7fe      	b.n	8001196 <SystemClock_Config+0x1e>
    _Error_Handler(__FILE__, __LINE__);
  }

    /**Initializes the CPU, AHB and APB busses clocks 
    */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001198:	230f      	movs	r3, #15
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 800119a:	9002      	str	r0, [sp, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800119c:	9003      	str	r0, [sp, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800119e:	9004      	str	r0, [sp, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80011a0:	9005      	str	r0, [sp, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80011a2:	a801      	add	r0, sp, #4
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80011a4:	9301      	str	r3, [sp, #4]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80011a6:	f7ff fc3d 	bl	8000a24 <HAL_RCC_ClockConfig>
 80011aa:	4604      	mov	r4, r0
 80011ac:	b100      	cbz	r0, 80011b0 <SystemClock_Config+0x38>
 80011ae:	e7fe      	b.n	80011ae <SystemClock_Config+0x36>
    _Error_Handler(__FILE__, __LINE__);
  }

    /**Configure the Systick interrupt time 
    */
  HAL_SYSTICK_Config(HAL_RCC_GetHCLKFreq()/1000);
 80011b0:	f7ff fcfa 	bl	8000ba8 <HAL_RCC_GetHCLKFreq>
 80011b4:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80011b8:	fbb0 f0f3 	udiv	r0, r0, r3
 80011bc:	f7ff f8a6 	bl	800030c <HAL_SYSTICK_Config>

    /**Configure the Systick 
    */
  HAL_SYSTICK_CLKSourceConfig(SYSTICK_CLKSOURCE_HCLK);
 80011c0:	2004      	movs	r0, #4
 80011c2:	f7ff f8b9 	bl	8000338 <HAL_SYSTICK_CLKSourceConfig>

  /* SysTick_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(SysTick_IRQn, 0, 0);
 80011c6:	4622      	mov	r2, r4
 80011c8:	4621      	mov	r1, r4
 80011ca:	f04f 30ff 	mov.w	r0, #4294967295
 80011ce:	f7ff f869 	bl	80002a4 <HAL_NVIC_SetPriority>
}
 80011d2:	b010      	add	sp, #64	; 0x40
 80011d4:	bd10      	pop	{r4, pc}
	...

080011d8 <adns_write_reg>:

/* USER CODE BEGIN 4 */

void adns_write_reg(uint8_t reg_addr, uint8_t data)
{
 80011d8:	b510      	push	{r4, lr}
	static uint8_t dataArray[2];
	dataArray[0] = reg_addr | 0x80;
 80011da:	4c0f      	ldr	r4, [pc, #60]	; (8001218 <adns_write_reg+0x40>)
 80011dc:	f060 007f 	orn	r0, r0, #127	; 0x7f
 80011e0:	7020      	strb	r0, [r4, #0]
	dataArray[1] = data;
 80011e2:	7061      	strb	r1, [r4, #1]
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_RESET);
 80011e4:	2200      	movs	r2, #0
 80011e6:	2110      	movs	r1, #16
 80011e8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80011ec:	f7ff f970 	bl	80004d0 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&hspi1, dataArray, 2, 20);
 80011f0:	4621      	mov	r1, r4
 80011f2:	2314      	movs	r3, #20
 80011f4:	2202      	movs	r2, #2
 80011f6:	4809      	ldr	r0, [pc, #36]	; (800121c <adns_write_reg+0x44>)
	while (HAL_SPI_GetState(&hspi1) != HAL_SPI_STATE_READY);
 80011f8:	4c08      	ldr	r4, [pc, #32]	; (800121c <adns_write_reg+0x44>)
	HAL_SPI_Transmit(&hspi1, dataArray, 2, 20);
 80011fa:	f7ff fdae 	bl	8000d5a <HAL_SPI_Transmit>
	while (HAL_SPI_GetState(&hspi1) != HAL_SPI_STATE_READY);
 80011fe:	4620      	mov	r0, r4
 8001200:	f7ff ff95 	bl	800112e <HAL_SPI_GetState>
 8001204:	2801      	cmp	r0, #1
 8001206:	4602      	mov	r2, r0
 8001208:	d1f9      	bne.n	80011fe <adns_write_reg+0x26>
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_SET);
 800120a:	2110      	movs	r1, #16
 800120c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
}
 8001210:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_SET);
 8001214:	f7ff b95c 	b.w	80004d0 <HAL_GPIO_WritePin>
 8001218:	20000c28 	.word	0x20000c28
 800121c:	20000c30 	.word	0x20000c30

08001220 <adns_read_reg>:

uint8_t adns_read_reg(uint8_t reg_addr)
{
 8001220:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8001222:	ac04      	add	r4, sp, #16
	volatile static uint8_t output = 0;

	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_RESET);
 8001224:	2200      	movs	r2, #0
{
 8001226:	f804 0d01 	strb.w	r0, [r4, #-1]!
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_RESET);
 800122a:	2110      	movs	r1, #16
 800122c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001230:	f7ff f94e 	bl	80004d0 <HAL_GPIO_WritePin>
	HAL_SPI_TransmitReceive(&hspi1, &reg_addr, &output, 1, 10);
 8001234:	230a      	movs	r3, #10
 8001236:	9300      	str	r3, [sp, #0]
 8001238:	4621      	mov	r1, r4
 800123a:	2301      	movs	r3, #1
 800123c:	4a09      	ldr	r2, [pc, #36]	; (8001264 <adns_read_reg+0x44>)
 800123e:	480a      	ldr	r0, [pc, #40]	; (8001268 <adns_read_reg+0x48>)
	while (HAL_SPI_GetState(&hspi1) != HAL_SPI_STATE_READY);
 8001240:	4c09      	ldr	r4, [pc, #36]	; (8001268 <adns_read_reg+0x48>)
	HAL_SPI_TransmitReceive(&hspi1, &reg_addr, &output, 1, 10);
 8001242:	f7ff fe48 	bl	8000ed6 <HAL_SPI_TransmitReceive>
	while (HAL_SPI_GetState(&hspi1) != HAL_SPI_STATE_READY);
 8001246:	4620      	mov	r0, r4
 8001248:	f7ff ff71 	bl	800112e <HAL_SPI_GetState>
 800124c:	2801      	cmp	r0, #1
 800124e:	4602      	mov	r2, r0
 8001250:	d1f9      	bne.n	8001246 <adns_read_reg+0x26>
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_SET);
 8001252:	2110      	movs	r1, #16
 8001254:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001258:	f7ff f93a 	bl	80004d0 <HAL_GPIO_WritePin>

	return output;
 800125c:	4b01      	ldr	r3, [pc, #4]	; (8001264 <adns_read_reg+0x44>)
 800125e:	7818      	ldrb	r0, [r3, #0]
}
 8001260:	b004      	add	sp, #16
 8001262:	bd10      	pop	{r4, pc}
 8001264:	20000c2a 	.word	0x20000c2a
 8001268:	20000c30 	.word	0x20000c30

0800126c <get_micros>:

	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_SET);
}

uint32_t get_micros()
{
 800126c:	b508      	push	{r3, lr}
	static uint32_t micros;
	micros = (HAL_GetTick() * 1000) + ((8000 - SysTick->VAL) / 8);
 800126e:	f7fe ffed 	bl	800024c <HAL_GetTick>
 8001272:	4b05      	ldr	r3, [pc, #20]	; (8001288 <get_micros+0x1c>)
 8001274:	689a      	ldr	r2, [r3, #8]
 8001276:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800127a:	f5c2 52fa 	rsb	r2, r2, #8000	; 0x1f40
 800127e:	4358      	muls	r0, r3

	return micros;
}
 8001280:	eb00 00d2 	add.w	r0, r0, r2, lsr #3
 8001284:	bd08      	pop	{r3, pc}
 8001286:	bf00      	nop
 8001288:	e000e010 	.word	0xe000e010

0800128c <delay_us>:

void delay_us(uint32_t delay)
{
 800128c:	b538      	push	{r3, r4, r5, lr}
 800128e:	4604      	mov	r4, r0
	uint32_t current = get_micros();
 8001290:	f7ff ffec 	bl	800126c <get_micros>
	if ((delay + current) < 0xFFFFFFFF)
 8001294:	1903      	adds	r3, r0, r4
 8001296:	3301      	adds	r3, #1
	uint32_t current = get_micros();
 8001298:	4605      	mov	r5, r0
	if ((delay + current) < 0xFFFFFFFF)
 800129a:	d004      	beq.n	80012a6 <delay_us+0x1a>
	{
		while ((get_micros() - current) < delay);
 800129c:	f7ff ffe6 	bl	800126c <get_micros>
 80012a0:	1b40      	subs	r0, r0, r5
 80012a2:	4284      	cmp	r4, r0
 80012a4:	d8fa      	bhi.n	800129c <delay_us+0x10>
 80012a6:	bd38      	pop	{r3, r4, r5, pc}

080012a8 <adns_upload_firmware>:
{
 80012a8:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
	adns_write_reg(REG_Configuration_IV, 0x02);
 80012ac:	2102      	movs	r1, #2
 80012ae:	2039      	movs	r0, #57	; 0x39
 80012b0:	f7ff ff92 	bl	80011d8 <adns_write_reg>
	adns_write_reg(REG_SROM_Enable, 0x1D);
 80012b4:	211d      	movs	r1, #29
 80012b6:	2013      	movs	r0, #19
 80012b8:	f7ff ff8e 	bl	80011d8 <adns_write_reg>
	HAL_Delay(10);
 80012bc:	200a      	movs	r0, #10
 80012be:	f7fe ffcb 	bl	8000258 <HAL_Delay>
	adns_write_reg(REG_SROM_Enable, 0x18);
 80012c2:	2118      	movs	r1, #24
 80012c4:	2013      	movs	r0, #19
 80012c6:	f7ff ff87 	bl	80011d8 <adns_write_reg>
	uint8_t data = REG_SROM_Load_Burst | 0x80;
 80012ca:	ad02      	add	r5, sp, #8
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_RESET);
 80012cc:	2200      	movs	r2, #0
 80012ce:	2110      	movs	r1, #16
 80012d0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80012d4:	f7ff f8fc 	bl	80004d0 <HAL_GPIO_WritePin>
	uint8_t data = REG_SROM_Load_Burst | 0x80;
 80012d8:	23e2      	movs	r3, #226	; 0xe2
 80012da:	f805 3d01 	strb.w	r3, [r5, #-1]!
	HAL_SPI_Transmit(&hspi1, &data, 1, 10);
 80012de:	2201      	movs	r2, #1
 80012e0:	230a      	movs	r3, #10
 80012e2:	4629      	mov	r1, r5
 80012e4:	4814      	ldr	r0, [pc, #80]	; (8001338 <adns_upload_firmware+0x90>)
		data = firmware_data[i];
 80012e6:	f8df 8054 	ldr.w	r8, [pc, #84]	; 800133c <adns_upload_firmware+0x94>
		HAL_SPI_Transmit(&hspi1, &data, 1, 10);
 80012ea:	4e13      	ldr	r6, [pc, #76]	; (8001338 <adns_upload_firmware+0x90>)
	HAL_SPI_Transmit(&hspi1, &data, 1, 10);
 80012ec:	f7ff fd35 	bl	8000d5a <HAL_SPI_Transmit>
	for (uint16_t i = 0; i < firmware_length; i++)
 80012f0:	2400      	movs	r4, #0
 80012f2:	f640 37fd 	movw	r7, #3069	; 0xbfd
 80012f6:	b2a2      	uxth	r2, r4
 80012f8:	42ba      	cmp	r2, r7
 80012fa:	d908      	bls.n	800130e <adns_upload_firmware+0x66>
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_SET);
 80012fc:	2201      	movs	r2, #1
 80012fe:	2110      	movs	r1, #16
 8001300:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001304:	f7ff f8e4 	bl	80004d0 <HAL_GPIO_WritePin>
}
 8001308:	b002      	add	sp, #8
 800130a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		data = firmware_data[i];
 800130e:	f818 3002 	ldrb.w	r3, [r8, r2]
 8001312:	f88d 3007 	strb.w	r3, [sp, #7]
		HAL_SPI_Transmit(&hspi1, &data, 1, 10);
 8001316:	2201      	movs	r2, #1
 8001318:	230a      	movs	r3, #10
 800131a:	4629      	mov	r1, r5
 800131c:	4630      	mov	r0, r6
 800131e:	f7ff fd1c 	bl	8000d5a <HAL_SPI_Transmit>
		while (HAL_SPI_GetState(&hspi1) != HAL_SPI_STATE_READY);
 8001322:	4630      	mov	r0, r6
 8001324:	f7ff ff03 	bl	800112e <HAL_SPI_GetState>
 8001328:	2801      	cmp	r0, #1
 800132a:	d1fa      	bne.n	8001322 <adns_upload_firmware+0x7a>
		delay_us(10);
 800132c:	200a      	movs	r0, #10
 800132e:	f7ff ffad 	bl	800128c <delay_us>
 8001332:	3401      	adds	r4, #1
 8001334:	e7df      	b.n	80012f6 <adns_upload_firmware+0x4e>
 8001336:	bf00      	nop
 8001338:	20000c30 	.word	0x20000c30
 800133c:	20000008 	.word	0x20000008

08001340 <adns_perform_startup>:
{
 8001340:	b507      	push	{r0, r1, r2, lr}
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_SET);
 8001342:	2201      	movs	r2, #1
 8001344:	2110      	movs	r1, #16
 8001346:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800134a:	f7ff f8c1 	bl	80004d0 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_RESET);
 800134e:	2200      	movs	r2, #0
 8001350:	2110      	movs	r1, #16
 8001352:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001356:	f7ff f8bb 	bl	80004d0 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_SET);
 800135a:	2201      	movs	r2, #1
 800135c:	2110      	movs	r1, #16
 800135e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001362:	f7ff f8b5 	bl	80004d0 <HAL_GPIO_WritePin>
	adns_write_reg(REG_Power_Up_Reset, 0x5A);
 8001366:	215a      	movs	r1, #90	; 0x5a
 8001368:	203a      	movs	r0, #58	; 0x3a
 800136a:	f7ff ff35 	bl	80011d8 <adns_write_reg>
	HAL_Delay(50);
 800136e:	2032      	movs	r0, #50	; 0x32
 8001370:	f7fe ff72 	bl	8000258 <HAL_Delay>
	adns_read_reg(REG_Motion);
 8001374:	2002      	movs	r0, #2
 8001376:	f7ff ff53 	bl	8001220 <adns_read_reg>
	adns_read_reg(REG_Delta_X_L);
 800137a:	2003      	movs	r0, #3
 800137c:	f7ff ff50 	bl	8001220 <adns_read_reg>
	adns_read_reg(REG_Delta_X_H);
 8001380:	2004      	movs	r0, #4
 8001382:	f7ff ff4d 	bl	8001220 <adns_read_reg>
	adns_read_reg(REG_Delta_Y_L);
 8001386:	2005      	movs	r0, #5
 8001388:	f7ff ff4a 	bl	8001220 <adns_read_reg>
	adns_read_reg(REG_Delta_X_H);
 800138c:	2004      	movs	r0, #4
 800138e:	f7ff ff47 	bl	8001220 <adns_read_reg>
	adns_upload_firmware();
 8001392:	f7ff ff89 	bl	80012a8 <adns_upload_firmware>
	HAL_Delay(10);
 8001396:	200a      	movs	r0, #10
 8001398:	f7fe ff5e 	bl	8000258 <HAL_Delay>
	volatile uint8_t laser_ctrl = adns_read_reg(REG_LASER_CTRL0);
 800139c:	2020      	movs	r0, #32
 800139e:	f7ff ff3f 	bl	8001220 <adns_read_reg>
 80013a2:	f88d 0007 	strb.w	r0, [sp, #7]
	laser_ctrl &= 0xF0;
 80013a6:	f89d 3007 	ldrb.w	r3, [sp, #7]
 80013aa:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80013ae:	f88d 3007 	strb.w	r3, [sp, #7]
	adns_write_reg(REG_LASER_CTRL0, laser_ctrl);
 80013b2:	f89d 1007 	ldrb.w	r1, [sp, #7]
 80013b6:	2020      	movs	r0, #32
 80013b8:	f7ff ff0e 	bl	80011d8 <adns_write_reg>
	HAL_Delay(10);
 80013bc:	200a      	movs	r0, #10
 80013be:	f7fe ff4b 	bl	8000258 <HAL_Delay>
}
 80013c2:	b003      	add	sp, #12
 80013c4:	f85d fb04 	ldr.w	pc, [sp], #4

080013c8 <main>:
{
 80013c8:	b507      	push	{r0, r1, r2, lr}
  HAL_Init();
 80013ca:	f7fe ff21 	bl	8000210 <HAL_Init>
  SystemClock_Config();
 80013ce:	f7ff fed3 	bl	8001178 <SystemClock_Config>
  MX_GPIO_Init();
 80013d2:	f7ff feaf 	bl	8001134 <MX_GPIO_Init>
  MX_SPI1_Init();
 80013d6:	f000 f81d 	bl	8001414 <MX_SPI1_Init>
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_SET);
 80013da:	2201      	movs	r2, #1
 80013dc:	2110      	movs	r1, #16
 80013de:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80013e2:	f7ff f875 	bl	80004d0 <HAL_GPIO_WritePin>
  HAL_Delay(1000);
 80013e6:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80013ea:	f7fe ff35 	bl	8000258 <HAL_Delay>
  adns_perform_startup();
 80013ee:	f7ff ffa7 	bl	8001340 <adns_perform_startup>
	  HAL_Delay(100);
 80013f2:	2064      	movs	r0, #100	; 0x64
 80013f4:	f7fe ff30 	bl	8000258 <HAL_Delay>
	  volatile uint8_t dH = adns_read_reg(REG_Delta_X_L);
 80013f8:	2003      	movs	r0, #3
 80013fa:	f7ff ff11 	bl	8001220 <adns_read_reg>
 80013fe:	f88d 0006 	strb.w	r0, [sp, #6]
	  volatile uint8_t dL = adns_read_reg(REG_Delta_X_H);
 8001402:	2004      	movs	r0, #4
 8001404:	f7ff ff0c 	bl	8001220 <adns_read_reg>
 8001408:	f88d 0007 	strb.w	r0, [sp, #7]
	  (void)dH;
 800140c:	f89d 3006 	ldrb.w	r3, [sp, #6]
 8001410:	e7ef      	b.n	80013f2 <main+0x2a>

08001412 <_Error_Handler>:
  * @param  file: The file name as string.
  * @param  line: The line in file as a number.
  * @retval None
  */
void _Error_Handler(char *file, int line)
{
 8001412:	e7fe      	b.n	8001412 <_Error_Handler>

08001414 <MX_SPI1_Init>:

/* SPI1 init function */
void MX_SPI1_Init(void)
{

  hspi1.Instance = SPI1;
 8001414:	4812      	ldr	r0, [pc, #72]	; (8001460 <MX_SPI1_Init+0x4c>)
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8001416:	4913      	ldr	r1, [pc, #76]	; (8001464 <MX_SPI1_Init+0x50>)
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8001418:	f44f 62e0 	mov.w	r2, #1792	; 0x700
{
 800141c:	b508      	push	{r3, lr}
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 800141e:	60c2      	str	r2, [r0, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_HIGH;
 8001420:	2202      	movs	r2, #2
 8001422:	6102      	str	r2, [r0, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_2EDGE;
 8001424:	2201      	movs	r2, #1
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8001426:	f44f 7382 	mov.w	r3, #260	; 0x104
  hspi1.Init.CLKPhase = SPI_PHASE_2EDGE;
 800142a:	6142      	str	r2, [r0, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 800142c:	f44f 7200 	mov.w	r2, #512	; 0x200
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8001430:	e880 000a 	stmia.w	r0, {r1, r3}
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8001434:	6182      	str	r2, [r0, #24]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8001436:	2300      	movs	r3, #0
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
  hspi1.Init.CRCPolynomial = 7;
 8001438:	2207      	movs	r2, #7
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 800143a:	6083      	str	r3, [r0, #8]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800143c:	61c3      	str	r3, [r0, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800143e:	6203      	str	r3, [r0, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8001440:	6243      	str	r3, [r0, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001442:	6283      	str	r3, [r0, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 7;
 8001444:	62c2      	str	r2, [r0, #44]	; 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8001446:	6303      	str	r3, [r0, #48]	; 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
 8001448:	6343      	str	r3, [r0, #52]	; 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 800144a:	f7ff fc35 	bl	8000cb8 <HAL_SPI_Init>
 800144e:	b128      	cbz	r0, 800145c <MX_SPI1_Init+0x48>
  {
    _Error_Handler(__FILE__, __LINE__);
 8001450:	2147      	movs	r1, #71	; 0x47
 8001452:	4805      	ldr	r0, [pc, #20]	; (8001468 <MX_SPI1_Init+0x54>)
  }

}
 8001454:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    _Error_Handler(__FILE__, __LINE__);
 8001458:	f7ff bfdb 	b.w	8001412 <_Error_Handler>
 800145c:	bd08      	pop	{r3, pc}
 800145e:	bf00      	nop
 8001460:	20000c30 	.word	0x20000c30
 8001464:	40013000 	.word	0x40013000
 8001468:	0800168c 	.word	0x0800168c

0800146c <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 800146c:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}

  GPIO_InitTypeDef GPIO_InitStruct;
  if(spiHandle->Instance==SPI1)
 800146e:	6802      	ldr	r2, [r0, #0]
 8001470:	4b0f      	ldr	r3, [pc, #60]	; (80014b0 <HAL_SPI_MspInit+0x44>)
 8001472:	429a      	cmp	r2, r3
 8001474:	d119      	bne.n	80014aa <HAL_SPI_MspInit+0x3e>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8001476:	f503 4360 	add.w	r3, r3, #57344	; 0xe000
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800147a:	a901      	add	r1, sp, #4
    __HAL_RCC_SPI1_CLK_ENABLE();
 800147c:	699a      	ldr	r2, [r3, #24]
 800147e:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8001482:	619a      	str	r2, [r3, #24]
 8001484:	699b      	ldr	r3, [r3, #24]
 8001486:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800148a:	9300      	str	r3, [sp, #0]
 800148c:	9b00      	ldr	r3, [sp, #0]
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 800148e:	23e0      	movs	r3, #224	; 0xe0
 8001490:	9301      	str	r3, [sp, #4]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001492:	2302      	movs	r3, #2
 8001494:	9302      	str	r3, [sp, #8]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001496:	2300      	movs	r3, #0
 8001498:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800149a:	2303      	movs	r3, #3
 800149c:	9304      	str	r3, [sp, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800149e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80014a2:	2305      	movs	r3, #5
 80014a4:	9305      	str	r3, [sp, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80014a6:	f7fe ff59 	bl	800035c <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }
}
 80014aa:	b007      	add	sp, #28
 80014ac:	f85d fb04 	ldr.w	pc, [sp], #4
 80014b0:	40013000 	.word	0x40013000

080014b4 <HAL_MspInit>:
{
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80014b4:	4b1d      	ldr	r3, [pc, #116]	; (800152c <HAL_MspInit+0x78>)
{
 80014b6:	b507      	push	{r0, r1, r2, lr}
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80014b8:	699a      	ldr	r2, [r3, #24]
 80014ba:	f042 0201 	orr.w	r2, r2, #1
 80014be:	619a      	str	r2, [r3, #24]
 80014c0:	699b      	ldr	r3, [r3, #24]
 80014c2:	f003 0301 	and.w	r3, r3, #1
 80014c6:	9301      	str	r3, [sp, #4]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80014c8:	2003      	movs	r0, #3
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80014ca:	9b01      	ldr	r3, [sp, #4]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80014cc:	f7fe fed8 	bl	8000280 <HAL_NVIC_SetPriorityGrouping>

  /* System interrupt init*/
  /* MemoryManagement_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(MemoryManagement_IRQn, 0, 0);
 80014d0:	2200      	movs	r2, #0
 80014d2:	4611      	mov	r1, r2
 80014d4:	f06f 000b 	mvn.w	r0, #11
 80014d8:	f7fe fee4 	bl	80002a4 <HAL_NVIC_SetPriority>
  /* BusFault_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(BusFault_IRQn, 0, 0);
 80014dc:	2200      	movs	r2, #0
 80014de:	4611      	mov	r1, r2
 80014e0:	f06f 000a 	mvn.w	r0, #10
 80014e4:	f7fe fede 	bl	80002a4 <HAL_NVIC_SetPriority>
  /* UsageFault_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(UsageFault_IRQn, 0, 0);
 80014e8:	2200      	movs	r2, #0
 80014ea:	4611      	mov	r1, r2
 80014ec:	f06f 0009 	mvn.w	r0, #9
 80014f0:	f7fe fed8 	bl	80002a4 <HAL_NVIC_SetPriority>
  /* SVCall_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(SVCall_IRQn, 0, 0);
 80014f4:	2200      	movs	r2, #0
 80014f6:	4611      	mov	r1, r2
 80014f8:	f06f 0004 	mvn.w	r0, #4
 80014fc:	f7fe fed2 	bl	80002a4 <HAL_NVIC_SetPriority>
  /* DebugMonitor_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DebugMonitor_IRQn, 0, 0);
 8001500:	2200      	movs	r2, #0
 8001502:	4611      	mov	r1, r2
 8001504:	f06f 0003 	mvn.w	r0, #3
 8001508:	f7fe fecc 	bl	80002a4 <HAL_NVIC_SetPriority>
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 0, 0);
 800150c:	2200      	movs	r2, #0
 800150e:	4611      	mov	r1, r2
 8001510:	f06f 0001 	mvn.w	r0, #1
 8001514:	f7fe fec6 	bl	80002a4 <HAL_NVIC_SetPriority>
  /* SysTick_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(SysTick_IRQn, 0, 0);
 8001518:	2200      	movs	r2, #0
 800151a:	4611      	mov	r1, r2
 800151c:	f04f 30ff 	mov.w	r0, #4294967295
 8001520:	f7fe fec0 	bl	80002a4 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001524:	b003      	add	sp, #12
 8001526:	f85d fb04 	ldr.w	pc, [sp], #4
 800152a:	bf00      	nop
 800152c:	40021000 	.word	0x40021000

08001530 <NMI_Handler>:
 8001530:	4770      	bx	lr

08001532 <HardFault_Handler>:

/**
* @brief This function handles Hard fault interrupt.
*/
void HardFault_Handler(void)
{
 8001532:	e7fe      	b.n	8001532 <HardFault_Handler>

08001534 <MemManage_Handler>:

/**
* @brief This function handles Memory management fault.
*/
void MemManage_Handler(void)
{
 8001534:	e7fe      	b.n	8001534 <MemManage_Handler>

08001536 <BusFault_Handler>:

/**
* @brief This function handles Pre-fetch fault, memory access fault.
*/
void BusFault_Handler(void)
{
 8001536:	e7fe      	b.n	8001536 <BusFault_Handler>

08001538 <UsageFault_Handler>:

/**
* @brief This function handles Undefined instruction or illegal state.
*/
void UsageFault_Handler(void)
{
 8001538:	e7fe      	b.n	8001538 <UsageFault_Handler>

0800153a <SVC_Handler>:
 800153a:	4770      	bx	lr

0800153c <DebugMon_Handler>:
 800153c:	4770      	bx	lr

0800153e <PendSV_Handler>:

/**
* @brief This function handles Pendable request for system service.
*/
void PendSV_Handler(void)
{
 800153e:	4770      	bx	lr

08001540 <SysTick_Handler>:

/**
* @brief This function handles System tick timer.
*/
void SysTick_Handler(void)
{
 8001540:	b508      	push	{r3, lr}
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001542:	f7fe fe77 	bl	8000234 <HAL_IncTick>
  HAL_SYSTICK_IRQHandler();
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001546:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  HAL_SYSTICK_IRQHandler();
 800154a:	f7fe bf02 	b.w	8000352 <HAL_SYSTICK_IRQHandler>
	...

08001550 <SystemInit>:
  */
void SystemInit(void)
{
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001550:	4915      	ldr	r1, [pc, #84]	; (80015a8 <SystemInit+0x58>)
 8001552:	f8d1 3088 	ldr.w	r3, [r1, #136]	; 0x88
 8001556:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800155a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  #endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= 0x00000001U;
 800155e:	4b13      	ldr	r3, [pc, #76]	; (80015ac <SystemInit+0x5c>)
 8001560:	681a      	ldr	r2, [r3, #0]
 8001562:	f042 0201 	orr.w	r2, r2, #1
 8001566:	601a      	str	r2, [r3, #0]

  /* Reset CFGR register */
  RCC->CFGR &= 0xF87FC00CU;
 8001568:	6858      	ldr	r0, [r3, #4]
 800156a:	4a11      	ldr	r2, [pc, #68]	; (80015b0 <SystemInit+0x60>)
 800156c:	4002      	ands	r2, r0
 800156e:	605a      	str	r2, [r3, #4]

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= 0xFEF6FFFFU;
 8001570:	681a      	ldr	r2, [r3, #0]
 8001572:	f022 7284 	bic.w	r2, r2, #17301504	; 0x1080000
 8001576:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 800157a:	601a      	str	r2, [r3, #0]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 800157c:	681a      	ldr	r2, [r3, #0]
 800157e:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8001582:	601a      	str	r2, [r3, #0]

  /* Reset PLLSRC, PLLXTPRE, PLLMUL and USBPRE bits */
  RCC->CFGR &= 0xFF80FFFFU;
 8001584:	685a      	ldr	r2, [r3, #4]
 8001586:	f422 02fe 	bic.w	r2, r2, #8323072	; 0x7f0000
 800158a:	605a      	str	r2, [r3, #4]

  /* Reset PREDIV1[3:0] bits */
  RCC->CFGR2 &= 0xFFFFFFF0U;
 800158c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800158e:	f022 020f 	bic.w	r2, r2, #15
 8001592:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Reset USARTSW[1:0], I2CSW and TIMs bits */
  RCC->CFGR3 &= 0xFF00FCCCU;
 8001594:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8001596:	4a07      	ldr	r2, [pc, #28]	; (80015b4 <SystemInit+0x64>)
 8001598:	4002      	ands	r2, r0
 800159a:	631a      	str	r2, [r3, #48]	; 0x30

  /* Disable all interrupts */
  RCC->CIR = 0x00000000U;
 800159c:	2200      	movs	r2, #0
 800159e:	609a      	str	r2, [r3, #8]

#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 80015a0:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80015a4:	608b      	str	r3, [r1, #8]
 80015a6:	4770      	bx	lr
 80015a8:	e000ed00 	.word	0xe000ed00
 80015ac:	40021000 	.word	0x40021000
 80015b0:	f87fc00c 	.word	0xf87fc00c
 80015b4:	ff00fccc 	.word	0xff00fccc

080015b8 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 80015b8:	f8df d034 	ldr.w	sp, [pc, #52]	; 80015f0 <LoopForever+0x2>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 80015bc:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 80015be:	e003      	b.n	80015c8 <LoopCopyDataInit>

080015c0 <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 80015c0:	4b0c      	ldr	r3, [pc, #48]	; (80015f4 <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 80015c2:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 80015c4:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 80015c6:	3104      	adds	r1, #4

080015c8 <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 80015c8:	480b      	ldr	r0, [pc, #44]	; (80015f8 <LoopForever+0xa>)
	ldr	r3, =_edata
 80015ca:	4b0c      	ldr	r3, [pc, #48]	; (80015fc <LoopForever+0xe>)
	adds	r2, r0, r1
 80015cc:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 80015ce:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 80015d0:	d3f6      	bcc.n	80015c0 <CopyDataInit>
	ldr	r2, =_sbss
 80015d2:	4a0b      	ldr	r2, [pc, #44]	; (8001600 <LoopForever+0x12>)
	b	LoopFillZerobss
 80015d4:	e002      	b.n	80015dc <LoopFillZerobss>

080015d6 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 80015d6:	2300      	movs	r3, #0
	str	r3, [r2], #4
 80015d8:	f842 3b04 	str.w	r3, [r2], #4

080015dc <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 80015dc:	4b09      	ldr	r3, [pc, #36]	; (8001604 <LoopForever+0x16>)
	cmp	r2, r3
 80015de:	429a      	cmp	r2, r3
	bcc	FillZerobss
 80015e0:	d3f9      	bcc.n	80015d6 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 80015e2:	f7ff ffb5 	bl	8001550 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80015e6:	f000 f811 	bl	800160c <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80015ea:	f7ff feed 	bl	80013c8 <main>

080015ee <LoopForever>:

LoopForever:
    b LoopForever
 80015ee:	e7fe      	b.n	80015ee <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 80015f0:	20003000 	.word	0x20003000
	ldr	r3, =_sidata
 80015f4:	080016b4 	.word	0x080016b4
	ldr	r0, =_sdata
 80015f8:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 80015fc:	20000c0c 	.word	0x20000c0c
	ldr	r2, =_sbss
 8001600:	20000c0c 	.word	0x20000c0c
	ldr	r3, = _ebss
 8001604:	20000c94 	.word	0x20000c94

08001608 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001608:	e7fe      	b.n	8001608 <ADC1_2_IRQHandler>
	...

0800160c <__libc_init_array>:
 800160c:	b570      	push	{r4, r5, r6, lr}
 800160e:	4e0d      	ldr	r6, [pc, #52]	; (8001644 <__libc_init_array+0x38>)
 8001610:	4c0d      	ldr	r4, [pc, #52]	; (8001648 <__libc_init_array+0x3c>)
 8001612:	1ba4      	subs	r4, r4, r6
 8001614:	10a4      	asrs	r4, r4, #2
 8001616:	2500      	movs	r5, #0
 8001618:	42a5      	cmp	r5, r4
 800161a:	d109      	bne.n	8001630 <__libc_init_array+0x24>
 800161c:	4e0b      	ldr	r6, [pc, #44]	; (800164c <__libc_init_array+0x40>)
 800161e:	4c0c      	ldr	r4, [pc, #48]	; (8001650 <__libc_init_array+0x44>)
 8001620:	f000 f818 	bl	8001654 <_init>
 8001624:	1ba4      	subs	r4, r4, r6
 8001626:	10a4      	asrs	r4, r4, #2
 8001628:	2500      	movs	r5, #0
 800162a:	42a5      	cmp	r5, r4
 800162c:	d105      	bne.n	800163a <__libc_init_array+0x2e>
 800162e:	bd70      	pop	{r4, r5, r6, pc}
 8001630:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8001634:	4798      	blx	r3
 8001636:	3501      	adds	r5, #1
 8001638:	e7ee      	b.n	8001618 <__libc_init_array+0xc>
 800163a:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800163e:	4798      	blx	r3
 8001640:	3501      	adds	r5, #1
 8001642:	e7f2      	b.n	800162a <__libc_init_array+0x1e>
 8001644:	080016ac 	.word	0x080016ac
 8001648:	080016ac 	.word	0x080016ac
 800164c:	080016ac 	.word	0x080016ac
 8001650:	080016b0 	.word	0x080016b0

08001654 <_init>:
 8001654:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001656:	bf00      	nop
 8001658:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800165a:	bc08      	pop	{r3}
 800165c:	469e      	mov	lr, r3
 800165e:	4770      	bx	lr

08001660 <_fini>:
 8001660:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001662:	bf00      	nop
 8001664:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001666:	bc08      	pop	{r3}
 8001668:	469e      	mov	lr, r3
 800166a:	4770      	bx	lr
